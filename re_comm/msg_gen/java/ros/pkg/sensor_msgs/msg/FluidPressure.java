/* Auto-generated by genmsg_java.py for file /opt/ros/groovy/share/sensor_msgs/msg/FluidPressure.msg */

package ros.pkg.sensor_msgs.msg;

import java.nio.ByteBuffer;

public class FluidPressure extends ros.communication.Message {

  public ros.pkg.std_msgs.msg.Header header = new ros.pkg.std_msgs.msg.Header();
  public double fluid_pressure;
  public double variance;

  public FluidPressure() {
  }

  public static java.lang.String __s_getDataType() { return "sensor_msgs/FluidPressure"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "804dc5cea1c5306d6a2eb80b9833befe"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return " # Single pressure reading.  This message is appropriate for measuring the\n" +
" # pressure inside of a fluid (air, water, etc).  This also includes\n" +
" # atmospheric or barometric pressure.\n" +
"\n" +
" # This message is not appropriate for force/pressure contact sensors.\n" +
"\n" +
" Header header           # timestamp of the measurement\n" +
"                         # frame_id is the location of the pressure sensor\n" +
"\n" +
" float64 fluid_pressure  # Absolute pressure reading in Pascals.\n" +
"\n" +
" float64 variance        # 0 is interpreted as variance unknown\n" +
"================================================================================\n" +
"MSG: std_msgs/Header\n" +
"# Standard metadata for higher-level stamped data types.\n" +
"# This is generally used to communicate timestamped data \n" +
"# in a particular coordinate frame.\n" +
"# \n" +
"# sequence ID: consecutively increasing ID \n" +
"uint32 seq\n" +
"#Two-integer timestamp that is expressed as:\n" +
"# * stamp.secs: seconds (stamp_secs) since epoch\n" +
"# * stamp.nsecs: nanoseconds since stamp_secs\n" +
"# time-handling sugar is provided by the client library\n" +
"time stamp\n" +
"#Frame this data is associated with\n" +
"# 0: no frame\n" +
"# 1: global frame\n" +
"string frame_id\n" +
"\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public FluidPressure clone() {
    FluidPressure c = new FluidPressure();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += header.serializationLength();
    __l += 8; // fluid_pressure
    __l += 8; // variance
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    header.serialize(bb, seq);
    bb.putDouble(fluid_pressure);
    bb.putDouble(variance);
  }

  public void deserialize(ByteBuffer bb) {
    header.deserialize(bb);
    fluid_pressure = bb.getDouble();
    variance = bb.getDouble();
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof FluidPressure))
      return false;
    FluidPressure other = (FluidPressure) o;
    return
      header.equals(other.header) &&
      fluid_pressure == other.fluid_pressure &&
      variance == other.variance &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.header == null ? 0 : this.header.hashCode());
    result = prime * result + (int)((tmp = Double.doubleToLongBits(this.fluid_pressure)) ^ (tmp >>> 32));
    result = prime * result + (int)((tmp = Double.doubleToLongBits(this.variance)) ^ (tmp >>> 32));
    return result;
  }
} // class FluidPressure

