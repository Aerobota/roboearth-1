/* Auto-generated by genmsg_java.py for file /opt/ros/groovy/share/sensor_msgs/msg/TimeReference.msg */

package ros.pkg.sensor_msgs.msg;

import java.nio.ByteBuffer;

public class TimeReference extends ros.communication.Message {

  public ros.pkg.std_msgs.msg.Header header = new ros.pkg.std_msgs.msg.Header();
  public ros.communication.Time time_ref = new ros.communication.Time();
  public java.lang.String source = new java.lang.String();

  public TimeReference() {
  }

  public static java.lang.String __s_getDataType() { return "sensor_msgs/TimeReference"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "fded64a0265108ba86c3d38fb11c0c16"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "# Measurement from an external time source not actively synchronized with the system clock.\n" +
"\n" +
"Header header    # stamp is system time for which measurement was valid\n" +
"                 # frame_id is not used \n" +
"\n" +
"time   time_ref  # corresponding time from this external source\n" +
"string source    # (optional) name of time source\n" +
"\n" +
"================================================================================\n" +
"MSG: std_msgs/Header\n" +
"# Standard metadata for higher-level stamped data types.\n" +
"# This is generally used to communicate timestamped data \n" +
"# in a particular coordinate frame.\n" +
"# \n" +
"# sequence ID: consecutively increasing ID \n" +
"uint32 seq\n" +
"#Two-integer timestamp that is expressed as:\n" +
"# * stamp.secs: seconds (stamp_secs) since epoch\n" +
"# * stamp.nsecs: nanoseconds since stamp_secs\n" +
"# time-handling sugar is provided by the client library\n" +
"time stamp\n" +
"#Frame this data is associated with\n" +
"# 0: no frame\n" +
"# 1: global frame\n" +
"string frame_id\n" +
"\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public TimeReference clone() {
    TimeReference c = new TimeReference();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += header.serializationLength();
    __l += 8; // time_ref
    __l += 4 + source.length();
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    header.serialize(bb, seq);
    Serialization.writeTime(bb, time_ref);
    Serialization.writeString(bb, source);
  }

  public void deserialize(ByteBuffer bb) {
    header.deserialize(bb);
    time_ref = Serialization.readTime(bb);
    source = Serialization.readString(bb);
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof TimeReference))
      return false;
    TimeReference other = (TimeReference) o;
    return
      header.equals(other.header) &&
      time_ref.equals(other.time_ref) &&
      source.equals(other.source) &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.header == null ? 0 : this.header.hashCode());
    result = prime * result + (this.time_ref == null ? 0 : this.time_ref.hashCode());
    result = prime * result + (this.source == null ? 0 : this.source.hashCode());
    return result;
  }
} // class TimeReference

