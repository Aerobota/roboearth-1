/* Auto-generated by genmsg_java.py for file /opt/ros/groovy/share/trajectory_msgs/msg/JointTrajectory.msg */

package ros.pkg.trajectory_msgs.msg;

import java.nio.ByteBuffer;

public class JointTrajectory extends ros.communication.Message {

  public ros.pkg.std_msgs.msg.Header header = new ros.pkg.std_msgs.msg.Header();
  public java.util.ArrayList<java.lang.String> joint_names = new java.util.ArrayList<java.lang.String>();
  public java.util.ArrayList<ros.pkg.trajectory_msgs.msg.JointTrajectoryPoint> points = new java.util.ArrayList<ros.pkg.trajectory_msgs.msg.JointTrajectoryPoint>();

  public JointTrajectory() {
  }

  public static java.lang.String __s_getDataType() { return "trajectory_msgs/JointTrajectory"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "72214029c6fba47b2135714577dd745e"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "Header header\n" +
"string[] joint_names\n" +
"JointTrajectoryPoint[] points\n" +
"================================================================================\n" +
"MSG: std_msgs/Header\n" +
"# Standard metadata for higher-level stamped data types.\n" +
"# This is generally used to communicate timestamped data \n" +
"# in a particular coordinate frame.\n" +
"# \n" +
"# sequence ID: consecutively increasing ID \n" +
"uint32 seq\n" +
"#Two-integer timestamp that is expressed as:\n" +
"# * stamp.secs: seconds (stamp_secs) since epoch\n" +
"# * stamp.nsecs: nanoseconds since stamp_secs\n" +
"# time-handling sugar is provided by the client library\n" +
"time stamp\n" +
"#Frame this data is associated with\n" +
"# 0: no frame\n" +
"# 1: global frame\n" +
"string frame_id\n" +
"\n" +
"================================================================================\n" +
"MSG: trajectory_msgs/JointTrajectoryPoint\n" +
"float64[] positions\n" +
"float64[] velocities\n" +
"float64[] accelerations\n" +
"duration time_from_start\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public JointTrajectory clone() {
    JointTrajectory c = new JointTrajectory();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += header.serializationLength();
    __l += 4;
    for(java.lang.String val : joint_names) {
      __l += 4 + val.length();
    }
    __l += 4;
    for(ros.pkg.trajectory_msgs.msg.JointTrajectoryPoint val : points) {
      __l += val.serializationLength();
    }
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    header.serialize(bb, seq);
    bb.putInt(joint_names.size());
    for(java.lang.String val : joint_names) {
      Serialization.writeString(bb, val);
    }
    bb.putInt(points.size());
    for(ros.pkg.trajectory_msgs.msg.JointTrajectoryPoint val : points) {
      val.serialize(bb, seq);
    }
  }

  public void deserialize(ByteBuffer bb) {
    header.deserialize(bb);

    int __joint_names_len = bb.getInt();
    joint_names = new java.util.ArrayList<java.lang.String>(__joint_names_len);
    for(int __i=0; __i<__joint_names_len; __i++) {
      joint_names.add(Serialization.readString(bb));
    }

    int __points_len = bb.getInt();
    points = new java.util.ArrayList<ros.pkg.trajectory_msgs.msg.JointTrajectoryPoint>(__points_len);
    for(int __i=0; __i<__points_len; __i++) {
      ros.pkg.trajectory_msgs.msg.JointTrajectoryPoint __tmp = new ros.pkg.trajectory_msgs.msg.JointTrajectoryPoint();
      __tmp.deserialize(bb);
      points.add(__tmp);;
    }
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof JointTrajectory))
      return false;
    JointTrajectory other = (JointTrajectory) o;
    return
      header.equals(other.header) &&
      joint_names.equals(other.joint_names) &&
      points.equals(other.points) &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.header == null ? 0 : this.header.hashCode());
    result = prime * result + (this.joint_names == null ? 0 : this.joint_names.hashCode());
    result = prime * result + (this.points == null ? 0 : this.points.hashCode());
    return result;
  }
} // class JointTrajectory

