/* Auto-generated by genmsg_java.py for file /opt/ros/groovy/stacks/arm_navigation/arm_navigation_msgs/msg/PositionConstraint.msg */

package ros.pkg.arm_navigation_msgs.msg;

import java.nio.ByteBuffer;

public class PositionConstraint extends ros.communication.Message {

  public ros.pkg.std_msgs.msg.Header header = new ros.pkg.std_msgs.msg.Header();
  public java.lang.String link_name = new java.lang.String();
  public ros.pkg.geometry_msgs.msg.Point target_point_offset = new ros.pkg.geometry_msgs.msg.Point();
  public ros.pkg.geometry_msgs.msg.Point position = new ros.pkg.geometry_msgs.msg.Point();
  public ros.pkg.arm_navigation_msgs.msg.Shape constraint_region_shape = new ros.pkg.arm_navigation_msgs.msg.Shape();
  public ros.pkg.geometry_msgs.msg.Quaternion constraint_region_orientation = new ros.pkg.geometry_msgs.msg.Quaternion();
  public double weight;

  public PositionConstraint() {
  }

  public static java.lang.String __s_getDataType() { return "arm_navigation_msgs/PositionConstraint"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "7e3d9697e64b346b9d3cb7311bb88ccb"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "# This message contains the definition of a position constraint.\n" +
"Header header\n" +
"\n" +
"# The robot link this constraint refers to\n" +
"string link_name\n" +
"\n" +
"# The offset (in the link frame) for the target point on the link we are planning for\n" +
"geometry_msgs/Point target_point_offset\n" +
"\n" +
"# The nominal/target position for the point we are planning for\n" +
"geometry_msgs/Point position\n" +
"\n" +
"# The shape of the bounded region that constrains the position of the end-effector\n" +
"# This region is always centered at the position defined above\n" +
"arm_navigation_msgs/Shape constraint_region_shape\n" +
"\n" +
"# The orientation of the bounded region that constrains the position of the end-effector. \n" +
"# This allows the specification of non-axis aligned constraints\n" +
"geometry_msgs/Quaternion constraint_region_orientation\n" +
"\n" +
"# Constraint weighting factor - a weight for this constraint\n" +
"float64 weight\n" +
"\n" +
"================================================================================\n" +
"MSG: std_msgs/Header\n" +
"# Standard metadata for higher-level stamped data types.\n" +
"# This is generally used to communicate timestamped data \n" +
"# in a particular coordinate frame.\n" +
"# \n" +
"# sequence ID: consecutively increasing ID \n" +
"uint32 seq\n" +
"#Two-integer timestamp that is expressed as:\n" +
"# * stamp.secs: seconds (stamp_secs) since epoch\n" +
"# * stamp.nsecs: nanoseconds since stamp_secs\n" +
"# time-handling sugar is provided by the client library\n" +
"time stamp\n" +
"#Frame this data is associated with\n" +
"# 0: no frame\n" +
"# 1: global frame\n" +
"string frame_id\n" +
"\n" +
"================================================================================\n" +
"MSG: geometry_msgs/Point\n" +
"# This contains the position of a point in free space\n" +
"float64 x\n" +
"float64 y\n" +
"float64 z\n" +
"\n" +
"================================================================================\n" +
"MSG: arm_navigation_msgs/Shape\n" +
"byte SPHERE=0\n" +
"byte BOX=1\n" +
"byte CYLINDER=2\n" +
"byte MESH=3\n" +
"\n" +
"byte type\n" +
"\n" +
"\n" +
"#### define sphere, box, cylinder ####\n" +
"# the origin of each shape is considered at the shape's center\n" +
"\n" +
"# for sphere\n" +
"# radius := dimensions[0]\n" +
"\n" +
"# for cylinder\n" +
"# radius := dimensions[0]\n" +
"# length := dimensions[1]\n" +
"# the length is along the Z axis\n" +
"\n" +
"# for box\n" +
"# size_x := dimensions[0]\n" +
"# size_y := dimensions[1]\n" +
"# size_z := dimensions[2]\n" +
"float64[] dimensions\n" +
"\n" +
"\n" +
"#### define mesh ####\n" +
"\n" +
"# list of triangles; triangle k is defined by tre vertices located\n" +
"# at indices triangles[3k], triangles[3k+1], triangles[3k+2]\n" +
"int32[] triangles\n" +
"geometry_msgs/Point[] vertices\n" +
"\n" +
"================================================================================\n" +
"MSG: geometry_msgs/Quaternion\n" +
"# This represents an orientation in free space in quaternion form.\n" +
"\n" +
"float64 x\n" +
"float64 y\n" +
"float64 z\n" +
"float64 w\n" +
"\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public PositionConstraint clone() {
    PositionConstraint c = new PositionConstraint();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += header.serializationLength();
    __l += 4 + link_name.length();
    __l += target_point_offset.serializationLength();
    __l += position.serializationLength();
    __l += constraint_region_shape.serializationLength();
    __l += constraint_region_orientation.serializationLength();
    __l += 8; // weight
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    header.serialize(bb, seq);
    Serialization.writeString(bb, link_name);
    target_point_offset.serialize(bb, seq);
    position.serialize(bb, seq);
    constraint_region_shape.serialize(bb, seq);
    constraint_region_orientation.serialize(bb, seq);
    bb.putDouble(weight);
  }

  public void deserialize(ByteBuffer bb) {
    header.deserialize(bb);
    link_name = Serialization.readString(bb);
    target_point_offset.deserialize(bb);
    position.deserialize(bb);
    constraint_region_shape.deserialize(bb);
    constraint_region_orientation.deserialize(bb);
    weight = bb.getDouble();
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof PositionConstraint))
      return false;
    PositionConstraint other = (PositionConstraint) o;
    return
      header.equals(other.header) &&
      link_name.equals(other.link_name) &&
      target_point_offset.equals(other.target_point_offset) &&
      position.equals(other.position) &&
      constraint_region_shape.equals(other.constraint_region_shape) &&
      constraint_region_orientation.equals(other.constraint_region_orientation) &&
      weight == other.weight &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.header == null ? 0 : this.header.hashCode());
    result = prime * result + (this.link_name == null ? 0 : this.link_name.hashCode());
    result = prime * result + (this.target_point_offset == null ? 0 : this.target_point_offset.hashCode());
    result = prime * result + (this.position == null ? 0 : this.position.hashCode());
    result = prime * result + (this.constraint_region_shape == null ? 0 : this.constraint_region_shape.hashCode());
    result = prime * result + (this.constraint_region_orientation == null ? 0 : this.constraint_region_orientation.hashCode());
    result = prime * result + (int)((tmp = Double.doubleToLongBits(this.weight)) ^ (tmp >>> 32));
    return result;
  }
} // class PositionConstraint

