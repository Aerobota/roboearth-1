/* Auto-generated by genmsg_java.py for file /opt/ros/groovy/stacks/arm_navigation/arm_navigation_msgs/msg/LinkPadding.msg */

package ros.pkg.arm_navigation_msgs.msg;

import java.nio.ByteBuffer;

public class LinkPadding extends ros.communication.Message {

  public java.lang.String link_name = new java.lang.String();
  public double padding;

  public LinkPadding() {
  }

  public static java.lang.String __s_getDataType() { return "arm_navigation_msgs/LinkPadding"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "b3ea75670df55c696fedee97774d5947"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "#name for the link\n" +
"string link_name\n" +
"\n" +
"# padding to apply to the link\n" +
"float64 padding\n" +
"\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public LinkPadding clone() {
    LinkPadding c = new LinkPadding();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += 4 + link_name.length();
    __l += 8; // padding
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    Serialization.writeString(bb, link_name);
    bb.putDouble(padding);
  }

  public void deserialize(ByteBuffer bb) {
    link_name = Serialization.readString(bb);
    padding = bb.getDouble();
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof LinkPadding))
      return false;
    LinkPadding other = (LinkPadding) o;
    return
      link_name.equals(other.link_name) &&
      padding == other.padding &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.link_name == null ? 0 : this.link_name.hashCode());
    result = prime * result + (int)((tmp = Double.doubleToLongBits(this.padding)) ^ (tmp >>> 32));
    return result;
  }
} // class LinkPadding

