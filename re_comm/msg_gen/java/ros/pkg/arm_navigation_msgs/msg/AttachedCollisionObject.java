/* Auto-generated by genmsg_java.py for file /opt/ros/groovy/stacks/arm_navigation/arm_navigation_msgs/msg/AttachedCollisionObject.msg */

package ros.pkg.arm_navigation_msgs.msg;

import java.nio.ByteBuffer;

public class AttachedCollisionObject extends ros.communication.Message {
  static public final java.lang.String REMOVE_ALL_ATTACHED_OBJECTS = "\"all\"";

  public java.lang.String link_name = new java.lang.String();
  public ros.pkg.arm_navigation_msgs.msg.CollisionObject object = new ros.pkg.arm_navigation_msgs.msg.CollisionObject();
  public java.util.ArrayList<java.lang.String> touch_links = new java.util.ArrayList<java.lang.String>();

  public AttachedCollisionObject() {
  }

  public static java.lang.String __s_getDataType() { return "arm_navigation_msgs/AttachedCollisionObject"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "3fd8ca730863e3d97d109c317d106cf9"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "# The CollisionObject will be attached with a fixed joint to this link\n" +
"# If link name is set to REMOVE_ALL_ATTACHED_OBJECTS and object.operation \n" +
"# is set to REMOVE will remove all attached bodies attached to any object\n" +
"string link_name\n" +
"\n" +
"#Reserved for indicating that all attached objects should be removed\n" +
"string REMOVE_ALL_ATTACHED_OBJECTS = \"all\"\n" +
"\n" +
"#This contains the actual shapes and poses for the CollisionObject\n" +
"#to be attached to the link\n" +
"#If action is remove and no object.id is set, all objects\n" +
"#attached to the link indicated by link_name will be removed\n" +
"CollisionObject object\n" +
"\n" +
"# The set of links that the attached objects are allowed to touch\n" +
"# by default - the link_name is included by default\n" +
"string[] touch_links\n" +
"\n" +
"================================================================================\n" +
"MSG: arm_navigation_msgs/CollisionObject\n" +
"# a header, used for interpreting the poses\n" +
"Header header\n" +
"\n" +
"# the id of the object\n" +
"string id\n" +
"\n" +
"# The padding used for filtering points near the object.\n" +
"# This does not affect collision checking for the object.  \n" +
"# Set to negative to get zero padding.\n" +
"float32 padding\n" +
"\n" +
"#This contains what is to be done with the object\n" +
"CollisionObjectOperation operation\n" +
"\n" +
"#the shapes associated with the object\n" +
"arm_navigation_msgs/Shape[] shapes\n" +
"\n" +
"#the poses associated with the shapes - will be transformed using the header\n" +
"geometry_msgs/Pose[] poses\n" +
"\n" +
"================================================================================\n" +
"MSG: std_msgs/Header\n" +
"# Standard metadata for higher-level stamped data types.\n" +
"# This is generally used to communicate timestamped data \n" +
"# in a particular coordinate frame.\n" +
"# \n" +
"# sequence ID: consecutively increasing ID \n" +
"uint32 seq\n" +
"#Two-integer timestamp that is expressed as:\n" +
"# * stamp.secs: seconds (stamp_secs) since epoch\n" +
"# * stamp.nsecs: nanoseconds since stamp_secs\n" +
"# time-handling sugar is provided by the client library\n" +
"time stamp\n" +
"#Frame this data is associated with\n" +
"# 0: no frame\n" +
"# 1: global frame\n" +
"string frame_id\n" +
"\n" +
"================================================================================\n" +
"MSG: arm_navigation_msgs/CollisionObjectOperation\n" +
"#Puts the object into the environment\n" +
"#or updates the object if already added\n" +
"byte ADD=0\n" +
"\n" +
"#Removes the object from the environment entirely\n" +
"byte REMOVE=1\n" +
"\n" +
"#Only valid within the context of a CollisionAttachedObject message\n" +
"#Will be ignored if sent with an CollisionObject message\n" +
"#Takes an attached object, detaches from the attached link\n" +
"#But adds back in as regular object\n" +
"byte DETACH_AND_ADD_AS_OBJECT=2\n" +
"\n" +
"#Only valid within the context of a CollisionAttachedObject message\n" +
"#Will be ignored if sent with an CollisionObject message\n" +
"#Takes current object in the environment and removes it as\n" +
"#a regular object\n" +
"byte ATTACH_AND_REMOVE_AS_OBJECT=3\n" +
"\n" +
"# Byte code for operation\n" +
"byte operation\n" +
"\n" +
"================================================================================\n" +
"MSG: arm_navigation_msgs/Shape\n" +
"byte SPHERE=0\n" +
"byte BOX=1\n" +
"byte CYLINDER=2\n" +
"byte MESH=3\n" +
"\n" +
"byte type\n" +
"\n" +
"\n" +
"#### define sphere, box, cylinder ####\n" +
"# the origin of each shape is considered at the shape's center\n" +
"\n" +
"# for sphere\n" +
"# radius := dimensions[0]\n" +
"\n" +
"# for cylinder\n" +
"# radius := dimensions[0]\n" +
"# length := dimensions[1]\n" +
"# the length is along the Z axis\n" +
"\n" +
"# for box\n" +
"# size_x := dimensions[0]\n" +
"# size_y := dimensions[1]\n" +
"# size_z := dimensions[2]\n" +
"float64[] dimensions\n" +
"\n" +
"\n" +
"#### define mesh ####\n" +
"\n" +
"# list of triangles; triangle k is defined by tre vertices located\n" +
"# at indices triangles[3k], triangles[3k+1], triangles[3k+2]\n" +
"int32[] triangles\n" +
"geometry_msgs/Point[] vertices\n" +
"\n" +
"================================================================================\n" +
"MSG: geometry_msgs/Point\n" +
"# This contains the position of a point in free space\n" +
"float64 x\n" +
"float64 y\n" +
"float64 z\n" +
"\n" +
"================================================================================\n" +
"MSG: geometry_msgs/Pose\n" +
"# A representation of pose in free space, composed of postion and orientation. \n" +
"Point position\n" +
"Quaternion orientation\n" +
"\n" +
"================================================================================\n" +
"MSG: geometry_msgs/Quaternion\n" +
"# This represents an orientation in free space in quaternion form.\n" +
"\n" +
"float64 x\n" +
"float64 y\n" +
"float64 z\n" +
"float64 w\n" +
"\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public AttachedCollisionObject clone() {
    AttachedCollisionObject c = new AttachedCollisionObject();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += 4 + link_name.length();
    __l += object.serializationLength();
    __l += 4;
    for(java.lang.String val : touch_links) {
      __l += 4 + val.length();
    }
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    Serialization.writeString(bb, link_name);
    object.serialize(bb, seq);
    bb.putInt(touch_links.size());
    for(java.lang.String val : touch_links) {
      Serialization.writeString(bb, val);
    }
  }

  public void deserialize(ByteBuffer bb) {
    link_name = Serialization.readString(bb);
    object.deserialize(bb);

    int __touch_links_len = bb.getInt();
    touch_links = new java.util.ArrayList<java.lang.String>(__touch_links_len);
    for(int __i=0; __i<__touch_links_len; __i++) {
      touch_links.add(Serialization.readString(bb));
    }
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof AttachedCollisionObject))
      return false;
    AttachedCollisionObject other = (AttachedCollisionObject) o;
    return
      link_name.equals(other.link_name) &&
      object.equals(other.object) &&
      touch_links.equals(other.touch_links) &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.link_name == null ? 0 : this.link_name.hashCode());
    result = prime * result + (this.object == null ? 0 : this.object.hashCode());
    result = prime * result + (this.touch_links == null ? 0 : this.touch_links.hashCode());
    return result;
  }
} // class AttachedCollisionObject

