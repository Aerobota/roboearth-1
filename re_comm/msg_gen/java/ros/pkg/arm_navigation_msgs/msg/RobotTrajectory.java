/* Auto-generated by genmsg_java.py for file /opt/ros/groovy/stacks/arm_navigation/arm_navigation_msgs/msg/RobotTrajectory.msg */

package ros.pkg.arm_navigation_msgs.msg;

import java.nio.ByteBuffer;

public class RobotTrajectory extends ros.communication.Message {

  public ros.pkg.trajectory_msgs.msg.JointTrajectory joint_trajectory = new ros.pkg.trajectory_msgs.msg.JointTrajectory();
  public ros.pkg.arm_navigation_msgs.msg.MultiDOFJointTrajectory multi_dof_joint_trajectory = new ros.pkg.arm_navigation_msgs.msg.MultiDOFJointTrajectory();

  public RobotTrajectory() {
  }

  public static java.lang.String __s_getDataType() { return "arm_navigation_msgs/RobotTrajectory"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "5bc8324620001e5c07a09d0bbfaaf093"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "trajectory_msgs/JointTrajectory joint_trajectory\n" +
"arm_navigation_msgs/MultiDOFJointTrajectory multi_dof_joint_trajectory\n" +
"\n" +
"================================================================================\n" +
"MSG: trajectory_msgs/JointTrajectory\n" +
"Header header\n" +
"string[] joint_names\n" +
"JointTrajectoryPoint[] points\n" +
"================================================================================\n" +
"MSG: std_msgs/Header\n" +
"# Standard metadata for higher-level stamped data types.\n" +
"# This is generally used to communicate timestamped data \n" +
"# in a particular coordinate frame.\n" +
"# \n" +
"# sequence ID: consecutively increasing ID \n" +
"uint32 seq\n" +
"#Two-integer timestamp that is expressed as:\n" +
"# * stamp.secs: seconds (stamp_secs) since epoch\n" +
"# * stamp.nsecs: nanoseconds since stamp_secs\n" +
"# time-handling sugar is provided by the client library\n" +
"time stamp\n" +
"#Frame this data is associated with\n" +
"# 0: no frame\n" +
"# 1: global frame\n" +
"string frame_id\n" +
"\n" +
"================================================================================\n" +
"MSG: trajectory_msgs/JointTrajectoryPoint\n" +
"float64[] positions\n" +
"float64[] velocities\n" +
"float64[] accelerations\n" +
"duration time_from_start\n" +
"================================================================================\n" +
"MSG: arm_navigation_msgs/MultiDOFJointTrajectory\n" +
"#A representation of a multi-dof joint trajectory\n" +
"duration stamp\n" +
"string[] joint_names\n" +
"string[] frame_ids\n" +
"string[] child_frame_ids\n" +
"MultiDOFJointTrajectoryPoint[] points\n" +
"\n" +
"================================================================================\n" +
"MSG: arm_navigation_msgs/MultiDOFJointTrajectoryPoint\n" +
"geometry_msgs/Pose[] poses\n" +
"duration time_from_start\n" +
"================================================================================\n" +
"MSG: geometry_msgs/Pose\n" +
"# A representation of pose in free space, composed of postion and orientation. \n" +
"Point position\n" +
"Quaternion orientation\n" +
"\n" +
"================================================================================\n" +
"MSG: geometry_msgs/Point\n" +
"# This contains the position of a point in free space\n" +
"float64 x\n" +
"float64 y\n" +
"float64 z\n" +
"\n" +
"================================================================================\n" +
"MSG: geometry_msgs/Quaternion\n" +
"# This represents an orientation in free space in quaternion form.\n" +
"\n" +
"float64 x\n" +
"float64 y\n" +
"float64 z\n" +
"float64 w\n" +
"\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public RobotTrajectory clone() {
    RobotTrajectory c = new RobotTrajectory();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += joint_trajectory.serializationLength();
    __l += multi_dof_joint_trajectory.serializationLength();
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    joint_trajectory.serialize(bb, seq);
    multi_dof_joint_trajectory.serialize(bb, seq);
  }

  public void deserialize(ByteBuffer bb) {
    joint_trajectory.deserialize(bb);
    multi_dof_joint_trajectory.deserialize(bb);
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof RobotTrajectory))
      return false;
    RobotTrajectory other = (RobotTrajectory) o;
    return
      joint_trajectory.equals(other.joint_trajectory) &&
      multi_dof_joint_trajectory.equals(other.multi_dof_joint_trajectory) &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.joint_trajectory == null ? 0 : this.joint_trajectory.hashCode());
    result = prime * result + (this.multi_dof_joint_trajectory == null ? 0 : this.multi_dof_joint_trajectory.hashCode());
    return result;
  }
} // class RobotTrajectory

