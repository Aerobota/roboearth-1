/* Auto-generated by genmsg_java.py for file /opt/ros/groovy/stacks/arm_navigation/arm_navigation_msgs/msg/MoveArmResult.msg */

package ros.pkg.arm_navigation_msgs.msg;

import java.nio.ByteBuffer;

public class MoveArmResult extends ros.communication.Message {

  public ros.pkg.arm_navigation_msgs.msg.ArmNavigationErrorCodes error_code = new ros.pkg.arm_navigation_msgs.msg.ArmNavigationErrorCodes();
  public java.util.ArrayList<ros.pkg.arm_navigation_msgs.msg.ContactInformation> contacts = new java.util.ArrayList<ros.pkg.arm_navigation_msgs.msg.ContactInformation>();

  public MoveArmResult() {
  }

  public static java.lang.String __s_getDataType() { return "arm_navigation_msgs/MoveArmResult"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "3229301226a0605e3ffc9dfdaeac662f"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n" +
"# An error code reflecting what went wrong\n" +
"ArmNavigationErrorCodes error_code\n" +
"\n" +
"ContactInformation[] contacts\n" +
"\n" +
"================================================================================\n" +
"MSG: arm_navigation_msgs/ArmNavigationErrorCodes\n" +
"int32 val\n" +
"\n" +
"# overall behavior\n" +
"int32 PLANNING_FAILED=-1\n" +
"int32 SUCCESS=1\n" +
"int32 TIMED_OUT=-2\n" +
"\n" +
"# start state errors\n" +
"int32 START_STATE_IN_COLLISION=-3\n" +
"int32 START_STATE_VIOLATES_PATH_CONSTRAINTS=-4\n" +
"\n" +
"# goal errors\n" +
"int32 GOAL_IN_COLLISION=-5\n" +
"int32 GOAL_VIOLATES_PATH_CONSTRAINTS=-6\n" +
"\n" +
"# robot state\n" +
"int32 INVALID_ROBOT_STATE=-7\n" +
"int32 INCOMPLETE_ROBOT_STATE=-8\n" +
"\n" +
"# planning request errors\n" +
"int32 INVALID_PLANNER_ID=-9\n" +
"int32 INVALID_NUM_PLANNING_ATTEMPTS=-10\n" +
"int32 INVALID_ALLOWED_PLANNING_TIME=-11\n" +
"int32 INVALID_GROUP_NAME=-12\n" +
"int32 INVALID_GOAL_JOINT_CONSTRAINTS=-13\n" +
"int32 INVALID_GOAL_POSITION_CONSTRAINTS=-14\n" +
"int32 INVALID_GOAL_ORIENTATION_CONSTRAINTS=-15\n" +
"int32 INVALID_PATH_JOINT_CONSTRAINTS=-16\n" +
"int32 INVALID_PATH_POSITION_CONSTRAINTS=-17\n" +
"int32 INVALID_PATH_ORIENTATION_CONSTRAINTS=-18\n" +
"\n" +
"# state/trajectory monitor errors\n" +
"int32 INVALID_TRAJECTORY=-19\n" +
"int32 INVALID_INDEX=-20\n" +
"int32 JOINT_LIMITS_VIOLATED=-21\n" +
"int32 PATH_CONSTRAINTS_VIOLATED=-22\n" +
"int32 COLLISION_CONSTRAINTS_VIOLATED=-23\n" +
"int32 GOAL_CONSTRAINTS_VIOLATED=-24\n" +
"int32 JOINTS_NOT_MOVING=-25\n" +
"int32 TRAJECTORY_CONTROLLER_FAILED=-26\n" +
"\n" +
"# system errors\n" +
"int32 FRAME_TRANSFORM_FAILURE=-27\n" +
"int32 COLLISION_CHECKING_UNAVAILABLE=-28\n" +
"int32 ROBOT_STATE_STALE=-29\n" +
"int32 SENSOR_INFO_STALE=-30\n" +
"\n" +
"# kinematics errors\n" +
"int32 NO_IK_SOLUTION=-31\n" +
"int32 INVALID_LINK_NAME=-32\n" +
"int32 IK_LINK_IN_COLLISION=-33\n" +
"int32 NO_FK_SOLUTION=-34\n" +
"int32 KINEMATICS_STATE_IN_COLLISION=-35\n" +
"\n" +
"# general errors\n" +
"int32 INVALID_TIMEOUT=-36\n" +
"\n" +
"\n" +
"================================================================================\n" +
"MSG: arm_navigation_msgs/ContactInformation\n" +
"# Standard ROS header contains information \n" +
"# about the frame in which this \n" +
"# contact is specified\n" +
"Header header\n" +
"\n" +
"# Position of the contact point\n" +
"geometry_msgs/Point position\n" +
"\n" +
"# Normal corresponding to the contact point\n" +
"geometry_msgs/Vector3 normal \n" +
"\n" +
"# Depth of contact point\n" +
"float64 depth\n" +
"\n" +
"# Name of the first body that is in contact\n" +
"# This could be a link or a namespace that represents a body\n" +
"string contact_body_1\n" +
"string attached_body_1\n" +
"uint32 body_type_1\n" +
"\n" +
"# Name of the second body that is in contact\n" +
"# This could be a link or a namespace that represents a body\n" +
"string contact_body_2\n" +
"string attached_body_2\n" +
"uint32 body_type_2\n" +
"\n" +
"uint32 ROBOT_LINK=0\n" +
"uint32 OBJECT=1\n" +
"uint32 ATTACHED_BODY=2\n" +
"================================================================================\n" +
"MSG: std_msgs/Header\n" +
"# Standard metadata for higher-level stamped data types.\n" +
"# This is generally used to communicate timestamped data \n" +
"# in a particular coordinate frame.\n" +
"# \n" +
"# sequence ID: consecutively increasing ID \n" +
"uint32 seq\n" +
"#Two-integer timestamp that is expressed as:\n" +
"# * stamp.secs: seconds (stamp_secs) since epoch\n" +
"# * stamp.nsecs: nanoseconds since stamp_secs\n" +
"# time-handling sugar is provided by the client library\n" +
"time stamp\n" +
"#Frame this data is associated with\n" +
"# 0: no frame\n" +
"# 1: global frame\n" +
"string frame_id\n" +
"\n" +
"================================================================================\n" +
"MSG: geometry_msgs/Point\n" +
"# This contains the position of a point in free space\n" +
"float64 x\n" +
"float64 y\n" +
"float64 z\n" +
"\n" +
"================================================================================\n" +
"MSG: geometry_msgs/Vector3\n" +
"# This represents a vector in free space. \n" +
"\n" +
"float64 x\n" +
"float64 y\n" +
"float64 z\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public MoveArmResult clone() {
    MoveArmResult c = new MoveArmResult();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += error_code.serializationLength();
    __l += 4;
    for(ros.pkg.arm_navigation_msgs.msg.ContactInformation val : contacts) {
      __l += val.serializationLength();
    }
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    error_code.serialize(bb, seq);
    bb.putInt(contacts.size());
    for(ros.pkg.arm_navigation_msgs.msg.ContactInformation val : contacts) {
      val.serialize(bb, seq);
    }
  }

  public void deserialize(ByteBuffer bb) {
    error_code.deserialize(bb);

    int __contacts_len = bb.getInt();
    contacts = new java.util.ArrayList<ros.pkg.arm_navigation_msgs.msg.ContactInformation>(__contacts_len);
    for(int __i=0; __i<__contacts_len; __i++) {
      ros.pkg.arm_navigation_msgs.msg.ContactInformation __tmp = new ros.pkg.arm_navigation_msgs.msg.ContactInformation();
      __tmp.deserialize(bb);
      contacts.add(__tmp);;
    }
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof MoveArmResult))
      return false;
    MoveArmResult other = (MoveArmResult) o;
    return
      error_code.equals(other.error_code) &&
      contacts.equals(other.contacts) &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.error_code == null ? 0 : this.error_code.hashCode());
    result = prime * result + (this.contacts == null ? 0 : this.contacts.hashCode());
    return result;
  }
} // class MoveArmResult

