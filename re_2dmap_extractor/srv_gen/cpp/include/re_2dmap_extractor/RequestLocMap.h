/* Auto-generated by genmsg_cpp for file /home/vitalij/ros/stacks/roboearth/re_2dmap_extractor/srv/RequestLocMap.srv */
#ifndef RE_2DMAP_EXTRACTOR_SERVICE_REQUESTLOCMAP_H
#define RE_2DMAP_EXTRACTOR_SERVICE_REQUESTLOCMAP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "re_msgs/RosFile.h"


#include "re_msgs/RosFile.h"
#include "re_msgs/RosFile.h"

namespace re_2dmap_extractor
{
template <class ContainerAllocator>
struct RequestLocMapRequest_ {
  typedef RequestLocMapRequest_<ContainerAllocator> Type;

  RequestLocMapRequest_()
  : octoMap()
  , z(0.0)
  , targetMapName()
  {
  }

  RequestLocMapRequest_(const ContainerAllocator& _alloc)
  : octoMap(_alloc)
  , z(0.0)
  , targetMapName(_alloc)
  {
  }

  typedef  ::re_msgs::RosFile_<ContainerAllocator>  _octoMap_type;
   ::re_msgs::RosFile_<ContainerAllocator>  octoMap;

  typedef double _z_type;
  double z;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _targetMapName_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  targetMapName;


  typedef boost::shared_ptr< ::re_2dmap_extractor::RequestLocMapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_2dmap_extractor::RequestLocMapRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RequestLocMapRequest
typedef  ::re_2dmap_extractor::RequestLocMapRequest_<std::allocator<void> > RequestLocMapRequest;

typedef boost::shared_ptr< ::re_2dmap_extractor::RequestLocMapRequest> RequestLocMapRequestPtr;
typedef boost::shared_ptr< ::re_2dmap_extractor::RequestLocMapRequest const> RequestLocMapRequestConstPtr;



template <class ContainerAllocator>
struct RequestLocMapResponse_ {
  typedef RequestLocMapResponse_<ContainerAllocator> Type;

  RequestLocMapResponse_()
  : success(false)
  , locMap()
  , locMeta()
  {
  }

  RequestLocMapResponse_(const ContainerAllocator& _alloc)
  : success(false)
  , locMap(_alloc)
  , locMeta(_alloc)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;

  typedef  ::re_msgs::RosFile_<ContainerAllocator>  _locMap_type;
   ::re_msgs::RosFile_<ContainerAllocator>  locMap;

  typedef  ::re_msgs::RosFile_<ContainerAllocator>  _locMeta_type;
   ::re_msgs::RosFile_<ContainerAllocator>  locMeta;


  typedef boost::shared_ptr< ::re_2dmap_extractor::RequestLocMapResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_2dmap_extractor::RequestLocMapResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RequestLocMapResponse
typedef  ::re_2dmap_extractor::RequestLocMapResponse_<std::allocator<void> > RequestLocMapResponse;

typedef boost::shared_ptr< ::re_2dmap_extractor::RequestLocMapResponse> RequestLocMapResponsePtr;
typedef boost::shared_ptr< ::re_2dmap_extractor::RequestLocMapResponse const> RequestLocMapResponseConstPtr;


struct RequestLocMap
{

typedef RequestLocMapRequest Request;
typedef RequestLocMapResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct RequestLocMap
} // namespace re_2dmap_extractor

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_2dmap_extractor::RequestLocMapRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_2dmap_extractor::RequestLocMapRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_2dmap_extractor::RequestLocMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a31bdc686743a8e0baa91632efca1e98";
  }

  static const char* value(const  ::re_2dmap_extractor::RequestLocMapRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa31bdc686743a8e0ULL;
  static const uint64_t static_value2 = 0xbaa91632efca1e98ULL;
};

template<class ContainerAllocator>
struct DataType< ::re_2dmap_extractor::RequestLocMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_2dmap_extractor/RequestLocMapRequest";
  }

  static const char* value(const  ::re_2dmap_extractor::RequestLocMapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_2dmap_extractor::RequestLocMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_msgs/RosFile octoMap\n\
float64 z\n\
string targetMapName\n\
\n\
\n\
================================================================================\n\
MSG: re_msgs/RosFile\n\
# This file representation is used to pass binary data to the RoboEarthDB.\n\
# As the endianess isn't stored, only files with a byte order mark (BOM) or\n\
# an implicitly specified endianess should be transferred.\n\
string name   # file name\n\
int8[] data   # binary data \n\
\n\
";
  }

  static const char* value(const  ::re_2dmap_extractor::RequestLocMapRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_2dmap_extractor::RequestLocMapResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_2dmap_extractor::RequestLocMapResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_2dmap_extractor::RequestLocMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0cdfbb487eae2b1a99678f5623ad0e0e";
  }

  static const char* value(const  ::re_2dmap_extractor::RequestLocMapResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0cdfbb487eae2b1aULL;
  static const uint64_t static_value2 = 0x99678f5623ad0e0eULL;
};

template<class ContainerAllocator>
struct DataType< ::re_2dmap_extractor::RequestLocMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_2dmap_extractor/RequestLocMapResponse";
  }

  static const char* value(const  ::re_2dmap_extractor::RequestLocMapResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_2dmap_extractor::RequestLocMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
re_msgs/RosFile locMap\n\
re_msgs/RosFile locMeta\n\
\n\
\n\
\n\
================================================================================\n\
MSG: re_msgs/RosFile\n\
# This file representation is used to pass binary data to the RoboEarthDB.\n\
# As the endianess isn't stored, only files with a byte order mark (BOM) or\n\
# an implicitly specified endianess should be transferred.\n\
string name   # file name\n\
int8[] data   # binary data \n\
\n\
";
  }

  static const char* value(const  ::re_2dmap_extractor::RequestLocMapResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_2dmap_extractor::RequestLocMapRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.octoMap);
    stream.next(m.z);
    stream.next(m.targetMapName);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RequestLocMapRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_2dmap_extractor::RequestLocMapResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
    stream.next(m.locMap);
    stream.next(m.locMeta);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RequestLocMapResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<re_2dmap_extractor::RequestLocMap> {
  static const char* value() 
  {
    return "ff776d365b44637e4e3b054f6c62341b";
  }

  static const char* value(const re_2dmap_extractor::RequestLocMap&) { return value(); } 
};

template<>
struct DataType<re_2dmap_extractor::RequestLocMap> {
  static const char* value() 
  {
    return "re_2dmap_extractor/RequestLocMap";
  }

  static const char* value(const re_2dmap_extractor::RequestLocMap&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_2dmap_extractor::RequestLocMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ff776d365b44637e4e3b054f6c62341b";
  }

  static const char* value(const re_2dmap_extractor::RequestLocMapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_2dmap_extractor::RequestLocMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_2dmap_extractor/RequestLocMap";
  }

  static const char* value(const re_2dmap_extractor::RequestLocMapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_2dmap_extractor::RequestLocMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ff776d365b44637e4e3b054f6c62341b";
  }

  static const char* value(const re_2dmap_extractor::RequestLocMapResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_2dmap_extractor::RequestLocMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_2dmap_extractor/RequestLocMap";
  }

  static const char* value(const re_2dmap_extractor::RequestLocMapResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RE_2DMAP_EXTRACTOR_SERVICE_REQUESTLOCMAP_H

