/* Auto-generated by genmsg_cpp for file /home/vitalij/ros/stacks/roboearth/re_2dmap_extractor/srv/RequestNavMap.srv */
#ifndef RE_2DMAP_EXTRACTOR_SERVICE_REQUESTNAVMAP_H
#define RE_2DMAP_EXTRACTOR_SERVICE_REQUESTNAVMAP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "re_msgs/RosFile.h"


#include "re_msgs/RosFile.h"
#include "re_msgs/RosFile.h"

namespace re_2dmap_extractor
{
template <class ContainerAllocator>
struct RequestNavMapRequest_ {
  typedef RequestNavMapRequest_<ContainerAllocator> Type;

  RequestNavMapRequest_()
  : octoMap()
  , minZ(0.0)
  , maxZ(0.0)
  , targetMapName()
  {
  }

  RequestNavMapRequest_(const ContainerAllocator& _alloc)
  : octoMap(_alloc)
  , minZ(0.0)
  , maxZ(0.0)
  , targetMapName(_alloc)
  {
  }

  typedef  ::re_msgs::RosFile_<ContainerAllocator>  _octoMap_type;
   ::re_msgs::RosFile_<ContainerAllocator>  octoMap;

  typedef double _minZ_type;
  double minZ;

  typedef double _maxZ_type;
  double maxZ;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _targetMapName_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  targetMapName;


  typedef boost::shared_ptr< ::re_2dmap_extractor::RequestNavMapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_2dmap_extractor::RequestNavMapRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RequestNavMapRequest
typedef  ::re_2dmap_extractor::RequestNavMapRequest_<std::allocator<void> > RequestNavMapRequest;

typedef boost::shared_ptr< ::re_2dmap_extractor::RequestNavMapRequest> RequestNavMapRequestPtr;
typedef boost::shared_ptr< ::re_2dmap_extractor::RequestNavMapRequest const> RequestNavMapRequestConstPtr;



template <class ContainerAllocator>
struct RequestNavMapResponse_ {
  typedef RequestNavMapResponse_<ContainerAllocator> Type;

  RequestNavMapResponse_()
  : success(false)
  , navMap()
  , navMeta()
  {
  }

  RequestNavMapResponse_(const ContainerAllocator& _alloc)
  : success(false)
  , navMap(_alloc)
  , navMeta(_alloc)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;

  typedef  ::re_msgs::RosFile_<ContainerAllocator>  _navMap_type;
   ::re_msgs::RosFile_<ContainerAllocator>  navMap;

  typedef  ::re_msgs::RosFile_<ContainerAllocator>  _navMeta_type;
   ::re_msgs::RosFile_<ContainerAllocator>  navMeta;


  typedef boost::shared_ptr< ::re_2dmap_extractor::RequestNavMapResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_2dmap_extractor::RequestNavMapResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RequestNavMapResponse
typedef  ::re_2dmap_extractor::RequestNavMapResponse_<std::allocator<void> > RequestNavMapResponse;

typedef boost::shared_ptr< ::re_2dmap_extractor::RequestNavMapResponse> RequestNavMapResponsePtr;
typedef boost::shared_ptr< ::re_2dmap_extractor::RequestNavMapResponse const> RequestNavMapResponseConstPtr;


struct RequestNavMap
{

typedef RequestNavMapRequest Request;
typedef RequestNavMapResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct RequestNavMap
} // namespace re_2dmap_extractor

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_2dmap_extractor::RequestNavMapRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_2dmap_extractor::RequestNavMapRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_2dmap_extractor::RequestNavMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "df7cf7463d29461f790152865b4c43ae";
  }

  static const char* value(const  ::re_2dmap_extractor::RequestNavMapRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdf7cf7463d29461fULL;
  static const uint64_t static_value2 = 0x790152865b4c43aeULL;
};

template<class ContainerAllocator>
struct DataType< ::re_2dmap_extractor::RequestNavMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_2dmap_extractor/RequestNavMapRequest";
  }

  static const char* value(const  ::re_2dmap_extractor::RequestNavMapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_2dmap_extractor::RequestNavMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_msgs/RosFile octoMap\n\
float64 minZ\n\
float64 maxZ\n\
string targetMapName\n\
\n\
\n\
================================================================================\n\
MSG: re_msgs/RosFile\n\
# This file representation is used to pass binary data to the RoboEarthDB.\n\
# As the endianess isn't stored, only files with a byte order mark (BOM) or\n\
# an implicitly specified endianess should be transferred.\n\
string name   # file name\n\
int8[] data   # binary data \n\
\n\
";
  }

  static const char* value(const  ::re_2dmap_extractor::RequestNavMapRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_2dmap_extractor::RequestNavMapResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_2dmap_extractor::RequestNavMapResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_2dmap_extractor::RequestNavMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "97a3d99ee22bddc01d1424d7c776cdf8";
  }

  static const char* value(const  ::re_2dmap_extractor::RequestNavMapResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x97a3d99ee22bddc0ULL;
  static const uint64_t static_value2 = 0x1d1424d7c776cdf8ULL;
};

template<class ContainerAllocator>
struct DataType< ::re_2dmap_extractor::RequestNavMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_2dmap_extractor/RequestNavMapResponse";
  }

  static const char* value(const  ::re_2dmap_extractor::RequestNavMapResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_2dmap_extractor::RequestNavMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
re_msgs/RosFile navMap\n\
re_msgs/RosFile navMeta\n\
\n\
\n\
\n\
================================================================================\n\
MSG: re_msgs/RosFile\n\
# This file representation is used to pass binary data to the RoboEarthDB.\n\
# As the endianess isn't stored, only files with a byte order mark (BOM) or\n\
# an implicitly specified endianess should be transferred.\n\
string name   # file name\n\
int8[] data   # binary data \n\
\n\
";
  }

  static const char* value(const  ::re_2dmap_extractor::RequestNavMapResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_2dmap_extractor::RequestNavMapRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.octoMap);
    stream.next(m.minZ);
    stream.next(m.maxZ);
    stream.next(m.targetMapName);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RequestNavMapRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_2dmap_extractor::RequestNavMapResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
    stream.next(m.navMap);
    stream.next(m.navMeta);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RequestNavMapResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<re_2dmap_extractor::RequestNavMap> {
  static const char* value() 
  {
    return "fc2ec8e525a85e5d84266ccaa7e6d291";
  }

  static const char* value(const re_2dmap_extractor::RequestNavMap&) { return value(); } 
};

template<>
struct DataType<re_2dmap_extractor::RequestNavMap> {
  static const char* value() 
  {
    return "re_2dmap_extractor/RequestNavMap";
  }

  static const char* value(const re_2dmap_extractor::RequestNavMap&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_2dmap_extractor::RequestNavMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fc2ec8e525a85e5d84266ccaa7e6d291";
  }

  static const char* value(const re_2dmap_extractor::RequestNavMapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_2dmap_extractor::RequestNavMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_2dmap_extractor/RequestNavMap";
  }

  static const char* value(const re_2dmap_extractor::RequestNavMapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_2dmap_extractor::RequestNavMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fc2ec8e525a85e5d84266ccaa7e6d291";
  }

  static const char* value(const re_2dmap_extractor::RequestNavMapResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_2dmap_extractor::RequestNavMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_2dmap_extractor/RequestNavMap";
  }

  static const char* value(const re_2dmap_extractor::RequestNavMapResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RE_2DMAP_EXTRACTOR_SERVICE_REQUESTNAVMAP_H

