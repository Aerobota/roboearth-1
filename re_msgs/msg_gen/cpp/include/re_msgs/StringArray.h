/* Auto-generated by genmsg_cpp for file /home/vitalij/ros/stacks/roboearth/re_msgs/msg/StringArray.msg */
#ifndef RE_MSGS_MESSAGE_STRINGARRAY_H
#define RE_MSGS_MESSAGE_STRINGARRAY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace re_msgs
{
template <class ContainerAllocator>
struct StringArray_ {
  typedef StringArray_<ContainerAllocator> Type;

  StringArray_()
  : list()
  {
  }

  StringArray_(const ContainerAllocator& _alloc)
  : list(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _list_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  list;


  typedef boost::shared_ptr< ::re_msgs::StringArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_msgs::StringArray_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StringArray
typedef  ::re_msgs::StringArray_<std::allocator<void> > StringArray;

typedef boost::shared_ptr< ::re_msgs::StringArray> StringArrayPtr;
typedef boost::shared_ptr< ::re_msgs::StringArray const> StringArrayConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::re_msgs::StringArray_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::re_msgs::StringArray_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace re_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_msgs::StringArray_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_msgs::StringArray_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_msgs::StringArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8e09fa9aad51508cfdcab3b64f048ce0";
  }

  static const char* value(const  ::re_msgs::StringArray_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8e09fa9aad51508cULL;
  static const uint64_t static_value2 = 0xfdcab3b64f048ce0ULL;
};

template<class ContainerAllocator>
struct DataType< ::re_msgs::StringArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_msgs/StringArray";
  }

  static const char* value(const  ::re_msgs::StringArray_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_msgs::StringArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# A StringArray message contains an array of strings. This is used by other \n\
# message/service declarations in order to create 2-dimensional string \n\
# arrays with different lengths for one dimension (StringArray[])\n\
string[] list   # array of strings\n\
\n\
";
  }

  static const char* value(const  ::re_msgs::StringArray_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_msgs::StringArray_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.list);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StringArray_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::re_msgs::StringArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::re_msgs::StringArray_<ContainerAllocator> & v) 
  {
    s << indent << "list[]" << std::endl;
    for (size_t i = 0; i < v.list.size(); ++i)
    {
      s << indent << "  list[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.list[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // RE_MSGS_MESSAGE_STRINGARRAY_H

