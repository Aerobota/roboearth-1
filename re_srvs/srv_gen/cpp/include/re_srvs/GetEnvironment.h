/* Auto-generated by genmsg_cpp for file /home/vitalij/ros/stacks/roboearth/re_srvs/srv/GetEnvironment.srv */
#ifndef RE_SRVS_SERVICE_GETENVIRONMENT_H
#define RE_SRVS_SERVICE_GETENVIRONMENT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace re_srvs
{
template <class ContainerAllocator>
struct GetEnvironmentRequest_ {
  typedef GetEnvironmentRequest_<ContainerAllocator> Type;

  GetEnvironmentRequest_()
  : environmentUID()
  {
  }

  GetEnvironmentRequest_(const ContainerAllocator& _alloc)
  : environmentUID(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _environmentUID_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  environmentUID;


  typedef boost::shared_ptr< ::re_srvs::GetEnvironmentRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_srvs::GetEnvironmentRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetEnvironmentRequest
typedef  ::re_srvs::GetEnvironmentRequest_<std::allocator<void> > GetEnvironmentRequest;

typedef boost::shared_ptr< ::re_srvs::GetEnvironmentRequest> GetEnvironmentRequestPtr;
typedef boost::shared_ptr< ::re_srvs::GetEnvironmentRequest const> GetEnvironmentRequestConstPtr;



template <class ContainerAllocator>
struct GetEnvironmentResponse_ {
  typedef GetEnvironmentResponse_<ContainerAllocator> Type;

  GetEnvironmentResponse_()
  : success(false)
  , environment()
  , filenames()
  , fileURLs()
  {
  }

  GetEnvironmentResponse_(const ContainerAllocator& _alloc)
  : success(false)
  , environment(_alloc)
  , filenames(_alloc)
  , fileURLs(_alloc)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _environment_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  environment;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _filenames_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  filenames;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _fileURLs_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  fileURLs;


  typedef boost::shared_ptr< ::re_srvs::GetEnvironmentResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_srvs::GetEnvironmentResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetEnvironmentResponse
typedef  ::re_srvs::GetEnvironmentResponse_<std::allocator<void> > GetEnvironmentResponse;

typedef boost::shared_ptr< ::re_srvs::GetEnvironmentResponse> GetEnvironmentResponsePtr;
typedef boost::shared_ptr< ::re_srvs::GetEnvironmentResponse const> GetEnvironmentResponseConstPtr;


struct GetEnvironment
{

typedef GetEnvironmentRequest Request;
typedef GetEnvironmentResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetEnvironment
} // namespace re_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_srvs::GetEnvironmentRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_srvs::GetEnvironmentRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_srvs::GetEnvironmentRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f4a5f5c2e44c287025035e09cb251e6a";
  }

  static const char* value(const  ::re_srvs::GetEnvironmentRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf4a5f5c2e44c2870ULL;
  static const uint64_t static_value2 = 0x25035e09cb251e6aULL;
};

template<class ContainerAllocator>
struct DataType< ::re_srvs::GetEnvironmentRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/GetEnvironmentRequest";
  }

  static const char* value(const  ::re_srvs::GetEnvironmentRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_srvs::GetEnvironmentRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string environmentUID\n\
\n\
";
  }

  static const char* value(const  ::re_srvs::GetEnvironmentRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_srvs::GetEnvironmentResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_srvs::GetEnvironmentResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_srvs::GetEnvironmentResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a5699cab53904ee084b994a0b1c12120";
  }

  static const char* value(const  ::re_srvs::GetEnvironmentResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa5699cab53904ee0ULL;
  static const uint64_t static_value2 = 0x84b994a0b1c12120ULL;
};

template<class ContainerAllocator>
struct DataType< ::re_srvs::GetEnvironmentResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/GetEnvironmentResponse";
  }

  static const char* value(const  ::re_srvs::GetEnvironmentResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_srvs::GetEnvironmentResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
string environment\n\
string[] filenames\n\
string[] fileURLs\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::re_srvs::GetEnvironmentResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_srvs::GetEnvironmentRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.environmentUID);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetEnvironmentRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_srvs::GetEnvironmentResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
    stream.next(m.environment);
    stream.next(m.filenames);
    stream.next(m.fileURLs);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetEnvironmentResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<re_srvs::GetEnvironment> {
  static const char* value() 
  {
    return "c017f96c32c005323930741129f3a27d";
  }

  static const char* value(const re_srvs::GetEnvironment&) { return value(); } 
};

template<>
struct DataType<re_srvs::GetEnvironment> {
  static const char* value() 
  {
    return "re_srvs/GetEnvironment";
  }

  static const char* value(const re_srvs::GetEnvironment&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_srvs::GetEnvironmentRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c017f96c32c005323930741129f3a27d";
  }

  static const char* value(const re_srvs::GetEnvironmentRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_srvs::GetEnvironmentRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/GetEnvironment";
  }

  static const char* value(const re_srvs::GetEnvironmentRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_srvs::GetEnvironmentResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c017f96c32c005323930741129f3a27d";
  }

  static const char* value(const re_srvs::GetEnvironmentResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_srvs::GetEnvironmentResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/GetEnvironment";
  }

  static const char* value(const re_srvs::GetEnvironmentResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RE_SRVS_SERVICE_GETENVIRONMENT_H

