/* Auto-generated by genmsg_cpp for file /home/vitalij/ros/stacks/roboearth/re_srvs/srv/SetObject.srv */
#ifndef RE_SRVS_SERVICE_SETOBJECT_H
#define RE_SRVS_SERVICE_SETOBJECT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "re_msgs/File.h"



namespace re_srvs
{
template <class ContainerAllocator>
struct SetObjectRequest_ {
  typedef SetObjectRequest_<ContainerAllocator> Type;

  SetObjectRequest_()
  : cls()
  , id()
  , description()
  , object()
  , files()
  , apiKey()
  {
  }

  SetObjectRequest_(const ContainerAllocator& _alloc)
  : cls(_alloc)
  , id(_alloc)
  , description(_alloc)
  , object(_alloc)
  , files(_alloc)
  , apiKey(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cls_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  cls;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  id;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  description;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  object;

  typedef std::vector< ::re_msgs::File_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::re_msgs::File_<ContainerAllocator> >::other >  _files_type;
  std::vector< ::re_msgs::File_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::re_msgs::File_<ContainerAllocator> >::other >  files;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _apiKey_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  apiKey;


  typedef boost::shared_ptr< ::re_srvs::SetObjectRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_srvs::SetObjectRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetObjectRequest
typedef  ::re_srvs::SetObjectRequest_<std::allocator<void> > SetObjectRequest;

typedef boost::shared_ptr< ::re_srvs::SetObjectRequest> SetObjectRequestPtr;
typedef boost::shared_ptr< ::re_srvs::SetObjectRequest const> SetObjectRequestConstPtr;



template <class ContainerAllocator>
struct SetObjectResponse_ {
  typedef SetObjectResponse_<ContainerAllocator> Type;

  SetObjectResponse_()
  : success(false)
  {
  }

  SetObjectResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


  typedef boost::shared_ptr< ::re_srvs::SetObjectResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_srvs::SetObjectResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetObjectResponse
typedef  ::re_srvs::SetObjectResponse_<std::allocator<void> > SetObjectResponse;

typedef boost::shared_ptr< ::re_srvs::SetObjectResponse> SetObjectResponsePtr;
typedef boost::shared_ptr< ::re_srvs::SetObjectResponse const> SetObjectResponseConstPtr;


struct SetObject
{

typedef SetObjectRequest Request;
typedef SetObjectResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetObject
} // namespace re_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_srvs::SetObjectRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_srvs::SetObjectRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_srvs::SetObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e63a6e13df8209b325fae5c13990b9af";
  }

  static const char* value(const  ::re_srvs::SetObjectRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe63a6e13df8209b3ULL;
  static const uint64_t static_value2 = 0x25fae5c13990b9afULL;
};

template<class ContainerAllocator>
struct DataType< ::re_srvs::SetObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/SetObjectRequest";
  }

  static const char* value(const  ::re_srvs::SetObjectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_srvs::SetObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
string cls\n\
string id\n\
string description\n\
string object\n\
re_msgs/File[] files\n\
\n\
string apiKey\n\
\n\
\n\
================================================================================\n\
MSG: re_msgs/File\n\
# This file representation is used to pass binary data to the RoboEarthDB.\n\
# As the endianess isn't stored, only files with a byte order mark (BOM) or\n\
# an implicitly specified endianess should be transferred.\n\
string name   # file name\n\
int8[] data   # binary data \n\
\n\
";
  }

  static const char* value(const  ::re_srvs::SetObjectRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_srvs::SetObjectResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_srvs::SetObjectResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_srvs::SetObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::re_srvs::SetObjectResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::re_srvs::SetObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/SetObjectResponse";
  }

  static const char* value(const  ::re_srvs::SetObjectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_srvs::SetObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
";
  }

  static const char* value(const  ::re_srvs::SetObjectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::re_srvs::SetObjectResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_srvs::SetObjectRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.cls);
    stream.next(m.id);
    stream.next(m.description);
    stream.next(m.object);
    stream.next(m.files);
    stream.next(m.apiKey);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetObjectRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_srvs::SetObjectResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetObjectResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<re_srvs::SetObject> {
  static const char* value() 
  {
    return "16f471943cffa7dc443763a038f5cac9";
  }

  static const char* value(const re_srvs::SetObject&) { return value(); } 
};

template<>
struct DataType<re_srvs::SetObject> {
  static const char* value() 
  {
    return "re_srvs/SetObject";
  }

  static const char* value(const re_srvs::SetObject&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_srvs::SetObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "16f471943cffa7dc443763a038f5cac9";
  }

  static const char* value(const re_srvs::SetObjectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_srvs::SetObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/SetObject";
  }

  static const char* value(const re_srvs::SetObjectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_srvs::SetObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "16f471943cffa7dc443763a038f5cac9";
  }

  static const char* value(const re_srvs::SetObjectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_srvs::SetObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/SetObject";
  }

  static const char* value(const re_srvs::SetObjectResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RE_SRVS_SERVICE_SETOBJECT_H

