/* Auto-generated by genmsg_cpp for file /home/vitalij/ros/stacks/roboearth/re_srvs/srv/getNextPose.srv */
#ifndef RE_SRVS_SERVICE_GETNEXTPOSE_H
#define RE_SRVS_SERVICE_GETNEXTPOSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Pose.h"


#include "geometry_msgs/Pose.h"

namespace re_srvs
{
template <class ContainerAllocator>
struct getNextPoseRequest_ {
  typedef getNextPoseRequest_<ContainerAllocator> Type;

  getNextPoseRequest_()
  : currentPose()
  {
  }

  getNextPoseRequest_(const ContainerAllocator& _alloc)
  : currentPose(_alloc)
  {
  }

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _currentPose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  currentPose;


  typedef boost::shared_ptr< ::re_srvs::getNextPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_srvs::getNextPoseRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct getNextPoseRequest
typedef  ::re_srvs::getNextPoseRequest_<std::allocator<void> > getNextPoseRequest;

typedef boost::shared_ptr< ::re_srvs::getNextPoseRequest> getNextPoseRequestPtr;
typedef boost::shared_ptr< ::re_srvs::getNextPoseRequest const> getNextPoseRequestConstPtr;



template <class ContainerAllocator>
struct getNextPoseResponse_ {
  typedef getNextPoseResponse_<ContainerAllocator> Type;

  getNextPoseResponse_()
  : commandPose()
  , learningFinished(false)
  {
  }

  getNextPoseResponse_(const ContainerAllocator& _alloc)
  : commandPose(_alloc)
  , learningFinished(false)
  {
  }

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _commandPose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  commandPose;

  typedef uint8_t _learningFinished_type;
  uint8_t learningFinished;


  typedef boost::shared_ptr< ::re_srvs::getNextPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_srvs::getNextPoseResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct getNextPoseResponse
typedef  ::re_srvs::getNextPoseResponse_<std::allocator<void> > getNextPoseResponse;

typedef boost::shared_ptr< ::re_srvs::getNextPoseResponse> getNextPoseResponsePtr;
typedef boost::shared_ptr< ::re_srvs::getNextPoseResponse const> getNextPoseResponseConstPtr;


struct getNextPose
{

typedef getNextPoseRequest Request;
typedef getNextPoseResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct getNextPose
} // namespace re_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_srvs::getNextPoseRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_srvs::getNextPoseRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_srvs::getNextPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "68f88dbab9859bab49fcc8cd2125bed2";
  }

  static const char* value(const  ::re_srvs::getNextPoseRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x68f88dbab9859babULL;
  static const uint64_t static_value2 = 0x49fcc8cd2125bed2ULL;
};

template<class ContainerAllocator>
struct DataType< ::re_srvs::getNextPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/getNextPoseRequest";
  }

  static const char* value(const  ::re_srvs::getNextPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_srvs::getNextPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Pose currentPose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::re_srvs::getNextPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::re_srvs::getNextPoseRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_srvs::getNextPoseResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_srvs::getNextPoseResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_srvs::getNextPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3e1379b95e678c619009db32fe035ffe";
  }

  static const char* value(const  ::re_srvs::getNextPoseResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3e1379b95e678c61ULL;
  static const uint64_t static_value2 = 0x9009db32fe035ffeULL;
};

template<class ContainerAllocator>
struct DataType< ::re_srvs::getNextPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/getNextPoseResponse";
  }

  static const char* value(const  ::re_srvs::getNextPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_srvs::getNextPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Pose commandPose\n\
bool learningFinished\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::re_srvs::getNextPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::re_srvs::getNextPoseResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_srvs::getNextPoseRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.currentPose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct getNextPoseRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_srvs::getNextPoseResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.commandPose);
    stream.next(m.learningFinished);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct getNextPoseResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<re_srvs::getNextPose> {
  static const char* value() 
  {
    return "380505756efd551cb201fc9bfa85fa88";
  }

  static const char* value(const re_srvs::getNextPose&) { return value(); } 
};

template<>
struct DataType<re_srvs::getNextPose> {
  static const char* value() 
  {
    return "re_srvs/getNextPose";
  }

  static const char* value(const re_srvs::getNextPose&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_srvs::getNextPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "380505756efd551cb201fc9bfa85fa88";
  }

  static const char* value(const re_srvs::getNextPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_srvs::getNextPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/getNextPose";
  }

  static const char* value(const re_srvs::getNextPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_srvs::getNextPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "380505756efd551cb201fc9bfa85fa88";
  }

  static const char* value(const re_srvs::getNextPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_srvs::getNextPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/getNextPose";
  }

  static const char* value(const re_srvs::getNextPoseResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RE_SRVS_SERVICE_GETNEXTPOSE_H

