/* Auto-generated by genmsg_cpp for file /home/vitalij/ros/stacks/roboearth/re_srvs/srv/AddWorldModelObject.srv */
#ifndef RE_SRVS_SERVICE_ADDWORLDMODELOBJECT_H
#define RE_SRVS_SERVICE_ADDWORLDMODELOBJECT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/PoseStamped.h"



namespace re_srvs
{
template <class ContainerAllocator>
struct AddWorldModelObjectRequest_ {
  typedef AddWorldModelObjectRequest_<ContainerAllocator> Type;

  AddWorldModelObjectRequest_()
  : class_label()
  , pose()
  {
  }

  AddWorldModelObjectRequest_(const ContainerAllocator& _alloc)
  : class_label(_alloc)
  , pose(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _class_label_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  class_label;

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  pose;


  typedef boost::shared_ptr< ::re_srvs::AddWorldModelObjectRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_srvs::AddWorldModelObjectRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AddWorldModelObjectRequest
typedef  ::re_srvs::AddWorldModelObjectRequest_<std::allocator<void> > AddWorldModelObjectRequest;

typedef boost::shared_ptr< ::re_srvs::AddWorldModelObjectRequest> AddWorldModelObjectRequestPtr;
typedef boost::shared_ptr< ::re_srvs::AddWorldModelObjectRequest const> AddWorldModelObjectRequestConstPtr;



template <class ContainerAllocator>
struct AddWorldModelObjectResponse_ {
  typedef AddWorldModelObjectResponse_<ContainerAllocator> Type;

  AddWorldModelObjectResponse_()
  : ID(0)
  {
  }

  AddWorldModelObjectResponse_(const ContainerAllocator& _alloc)
  : ID(0)
  {
  }

  typedef uint32_t _ID_type;
  uint32_t ID;


  typedef boost::shared_ptr< ::re_srvs::AddWorldModelObjectResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_srvs::AddWorldModelObjectResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AddWorldModelObjectResponse
typedef  ::re_srvs::AddWorldModelObjectResponse_<std::allocator<void> > AddWorldModelObjectResponse;

typedef boost::shared_ptr< ::re_srvs::AddWorldModelObjectResponse> AddWorldModelObjectResponsePtr;
typedef boost::shared_ptr< ::re_srvs::AddWorldModelObjectResponse const> AddWorldModelObjectResponseConstPtr;


struct AddWorldModelObject
{

typedef AddWorldModelObjectRequest Request;
typedef AddWorldModelObjectResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct AddWorldModelObject
} // namespace re_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_srvs::AddWorldModelObjectRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_srvs::AddWorldModelObjectRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_srvs::AddWorldModelObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "399a32aaf4cf327390deb43aba853d9a";
  }

  static const char* value(const  ::re_srvs::AddWorldModelObjectRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x399a32aaf4cf3273ULL;
  static const uint64_t static_value2 = 0x90deb43aba853d9aULL;
};

template<class ContainerAllocator>
struct DataType< ::re_srvs::AddWorldModelObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/AddWorldModelObjectRequest";
  }

  static const char* value(const  ::re_srvs::AddWorldModelObjectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_srvs::AddWorldModelObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string class_label\n\
geometry_msgs/PoseStamped pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::re_srvs::AddWorldModelObjectRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_srvs::AddWorldModelObjectResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_srvs::AddWorldModelObjectResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_srvs::AddWorldModelObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2a52e1b267b1658389df7f773a4119c6";
  }

  static const char* value(const  ::re_srvs::AddWorldModelObjectResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2a52e1b267b16583ULL;
  static const uint64_t static_value2 = 0x89df7f773a4119c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::re_srvs::AddWorldModelObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/AddWorldModelObjectResponse";
  }

  static const char* value(const  ::re_srvs::AddWorldModelObjectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_srvs::AddWorldModelObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 ID\n\
\n\
\n\
";
  }

  static const char* value(const  ::re_srvs::AddWorldModelObjectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::re_srvs::AddWorldModelObjectResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_srvs::AddWorldModelObjectRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.class_label);
    stream.next(m.pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddWorldModelObjectRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_srvs::AddWorldModelObjectResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ID);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddWorldModelObjectResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<re_srvs::AddWorldModelObject> {
  static const char* value() 
  {
    return "411afd1e2f89d68762aa3bff8f0f33f8";
  }

  static const char* value(const re_srvs::AddWorldModelObject&) { return value(); } 
};

template<>
struct DataType<re_srvs::AddWorldModelObject> {
  static const char* value() 
  {
    return "re_srvs/AddWorldModelObject";
  }

  static const char* value(const re_srvs::AddWorldModelObject&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_srvs::AddWorldModelObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "411afd1e2f89d68762aa3bff8f0f33f8";
  }

  static const char* value(const re_srvs::AddWorldModelObjectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_srvs::AddWorldModelObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/AddWorldModelObject";
  }

  static const char* value(const re_srvs::AddWorldModelObjectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_srvs::AddWorldModelObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "411afd1e2f89d68762aa3bff8f0f33f8";
  }

  static const char* value(const re_srvs::AddWorldModelObjectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_srvs::AddWorldModelObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/AddWorldModelObject";
  }

  static const char* value(const re_srvs::AddWorldModelObjectResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RE_SRVS_SERVICE_ADDWORLDMODELOBJECT_H

