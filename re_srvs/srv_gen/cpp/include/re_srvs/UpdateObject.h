/* Auto-generated by genmsg_cpp for file /home/vitalij/ros/stacks/roboearth/re_srvs/srv/UpdateObject.srv */
#ifndef RE_SRVS_SERVICE_UPDATEOBJECT_H
#define RE_SRVS_SERVICE_UPDATEOBJECT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace re_srvs
{
template <class ContainerAllocator>
struct UpdateObjectRequest_ {
  typedef UpdateObjectRequest_<ContainerAllocator> Type;

  UpdateObjectRequest_()
  : uid()
  , description()
  , object()
  , apiKey()
  {
  }

  UpdateObjectRequest_(const ContainerAllocator& _alloc)
  : uid(_alloc)
  , description(_alloc)
  , object(_alloc)
  , apiKey(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _uid_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  uid;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  description;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  object;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _apiKey_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  apiKey;


  typedef boost::shared_ptr< ::re_srvs::UpdateObjectRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_srvs::UpdateObjectRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct UpdateObjectRequest
typedef  ::re_srvs::UpdateObjectRequest_<std::allocator<void> > UpdateObjectRequest;

typedef boost::shared_ptr< ::re_srvs::UpdateObjectRequest> UpdateObjectRequestPtr;
typedef boost::shared_ptr< ::re_srvs::UpdateObjectRequest const> UpdateObjectRequestConstPtr;



template <class ContainerAllocator>
struct UpdateObjectResponse_ {
  typedef UpdateObjectResponse_<ContainerAllocator> Type;

  UpdateObjectResponse_()
  : success(false)
  {
  }

  UpdateObjectResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


  typedef boost::shared_ptr< ::re_srvs::UpdateObjectResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_srvs::UpdateObjectResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct UpdateObjectResponse
typedef  ::re_srvs::UpdateObjectResponse_<std::allocator<void> > UpdateObjectResponse;

typedef boost::shared_ptr< ::re_srvs::UpdateObjectResponse> UpdateObjectResponsePtr;
typedef boost::shared_ptr< ::re_srvs::UpdateObjectResponse const> UpdateObjectResponseConstPtr;


struct UpdateObject
{

typedef UpdateObjectRequest Request;
typedef UpdateObjectResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct UpdateObject
} // namespace re_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_srvs::UpdateObjectRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_srvs::UpdateObjectRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_srvs::UpdateObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8d48a558916dbbda45477883bd652ccf";
  }

  static const char* value(const  ::re_srvs::UpdateObjectRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8d48a558916dbbdaULL;
  static const uint64_t static_value2 = 0x45477883bd652ccfULL;
};

template<class ContainerAllocator>
struct DataType< ::re_srvs::UpdateObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/UpdateObjectRequest";
  }

  static const char* value(const  ::re_srvs::UpdateObjectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_srvs::UpdateObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string uid\n\
string description\n\
string object\n\
string apiKey\n\
\n\
\n\
";
  }

  static const char* value(const  ::re_srvs::UpdateObjectRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_srvs::UpdateObjectResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_srvs::UpdateObjectResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_srvs::UpdateObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::re_srvs::UpdateObjectResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::re_srvs::UpdateObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/UpdateObjectResponse";
  }

  static const char* value(const  ::re_srvs::UpdateObjectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_srvs::UpdateObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
";
  }

  static const char* value(const  ::re_srvs::UpdateObjectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::re_srvs::UpdateObjectResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_srvs::UpdateObjectRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.uid);
    stream.next(m.description);
    stream.next(m.object);
    stream.next(m.apiKey);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct UpdateObjectRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_srvs::UpdateObjectResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct UpdateObjectResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<re_srvs::UpdateObject> {
  static const char* value() 
  {
    return "351d1e9c4e7893a1dcbf2efd81943365";
  }

  static const char* value(const re_srvs::UpdateObject&) { return value(); } 
};

template<>
struct DataType<re_srvs::UpdateObject> {
  static const char* value() 
  {
    return "re_srvs/UpdateObject";
  }

  static const char* value(const re_srvs::UpdateObject&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_srvs::UpdateObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "351d1e9c4e7893a1dcbf2efd81943365";
  }

  static const char* value(const re_srvs::UpdateObjectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_srvs::UpdateObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/UpdateObject";
  }

  static const char* value(const re_srvs::UpdateObjectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_srvs::UpdateObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "351d1e9c4e7893a1dcbf2efd81943365";
  }

  static const char* value(const re_srvs::UpdateObjectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_srvs::UpdateObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/UpdateObject";
  }

  static const char* value(const re_srvs::UpdateObjectResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RE_SRVS_SERVICE_UPDATEOBJECT_H

