/* Auto-generated by genmsg_cpp for file /home/vitalij/ros/stacks/roboearth/re_srvs/srv/Request2DMap.srv */
#ifndef RE_SRVS_SERVICE_REQUEST2DMAP_H
#define RE_SRVS_SERVICE_REQUEST2DMAP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "re_msgs/RosFile.h"
#include "re_msgs/RosFile.h"

namespace re_srvs
{
template <class ContainerAllocator>
struct Request2DMapRequest_ {
  typedef Request2DMapRequest_<ContainerAllocator> Type;

  Request2DMapRequest_()
  : envUID()
  , srdl()
  , baseScannerLink()
  , targetMapName()
  {
  }

  Request2DMapRequest_(const ContainerAllocator& _alloc)
  : envUID(_alloc)
  , srdl(_alloc)
  , baseScannerLink(_alloc)
  , targetMapName(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _envUID_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  envUID;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _srdl_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  srdl;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _baseScannerLink_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  baseScannerLink;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _targetMapName_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  targetMapName;


  typedef boost::shared_ptr< ::re_srvs::Request2DMapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_srvs::Request2DMapRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Request2DMapRequest
typedef  ::re_srvs::Request2DMapRequest_<std::allocator<void> > Request2DMapRequest;

typedef boost::shared_ptr< ::re_srvs::Request2DMapRequest> Request2DMapRequestPtr;
typedef boost::shared_ptr< ::re_srvs::Request2DMapRequest const> Request2DMapRequestConstPtr;



template <class ContainerAllocator>
struct Request2DMapResponse_ {
  typedef Request2DMapResponse_<ContainerAllocator> Type;

  Request2DMapResponse_()
  : success(false)
  , map()
  , meta()
  {
  }

  Request2DMapResponse_(const ContainerAllocator& _alloc)
  : success(false)
  , map(_alloc)
  , meta(_alloc)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;

  typedef  ::re_msgs::RosFile_<ContainerAllocator>  _map_type;
   ::re_msgs::RosFile_<ContainerAllocator>  map;

  typedef  ::re_msgs::RosFile_<ContainerAllocator>  _meta_type;
   ::re_msgs::RosFile_<ContainerAllocator>  meta;


  typedef boost::shared_ptr< ::re_srvs::Request2DMapResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_srvs::Request2DMapResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Request2DMapResponse
typedef  ::re_srvs::Request2DMapResponse_<std::allocator<void> > Request2DMapResponse;

typedef boost::shared_ptr< ::re_srvs::Request2DMapResponse> Request2DMapResponsePtr;
typedef boost::shared_ptr< ::re_srvs::Request2DMapResponse const> Request2DMapResponseConstPtr;


struct Request2DMap
{

typedef Request2DMapRequest Request;
typedef Request2DMapResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Request2DMap
} // namespace re_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_srvs::Request2DMapRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_srvs::Request2DMapRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_srvs::Request2DMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4ecd72f87dfe5c9d4a80ccd12672f9b3";
  }

  static const char* value(const  ::re_srvs::Request2DMapRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4ecd72f87dfe5c9dULL;
  static const uint64_t static_value2 = 0x4a80ccd12672f9b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::re_srvs::Request2DMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/Request2DMapRequest";
  }

  static const char* value(const  ::re_srvs::Request2DMapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_srvs::Request2DMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string envUID\n\
string srdl\n\
string baseScannerLink\n\
\n\
string targetMapName\n\
\n\
\n\
";
  }

  static const char* value(const  ::re_srvs::Request2DMapRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_srvs::Request2DMapResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_srvs::Request2DMapResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_srvs::Request2DMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0b14b385997efc59caa091c489f65080";
  }

  static const char* value(const  ::re_srvs::Request2DMapResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0b14b385997efc59ULL;
  static const uint64_t static_value2 = 0xcaa091c489f65080ULL;
};

template<class ContainerAllocator>
struct DataType< ::re_srvs::Request2DMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/Request2DMapResponse";
  }

  static const char* value(const  ::re_srvs::Request2DMapResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_srvs::Request2DMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
re_msgs/RosFile map\n\
re_msgs/RosFile meta\n\
\n\
\n\
================================================================================\n\
MSG: re_msgs/RosFile\n\
# This file representation is used to pass binary data to the RoboEarthDB.\n\
# As the endianess isn't stored, only files with a byte order mark (BOM) or\n\
# an implicitly specified endianess should be transferred.\n\
string name   # file name\n\
int8[] data   # binary data \n\
\n\
";
  }

  static const char* value(const  ::re_srvs::Request2DMapResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_srvs::Request2DMapRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.envUID);
    stream.next(m.srdl);
    stream.next(m.baseScannerLink);
    stream.next(m.targetMapName);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Request2DMapRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_srvs::Request2DMapResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
    stream.next(m.map);
    stream.next(m.meta);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Request2DMapResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<re_srvs::Request2DMap> {
  static const char* value() 
  {
    return "36589988f0eaacd3eb9e9e443f14ac19";
  }

  static const char* value(const re_srvs::Request2DMap&) { return value(); } 
};

template<>
struct DataType<re_srvs::Request2DMap> {
  static const char* value() 
  {
    return "re_srvs/Request2DMap";
  }

  static const char* value(const re_srvs::Request2DMap&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_srvs::Request2DMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "36589988f0eaacd3eb9e9e443f14ac19";
  }

  static const char* value(const re_srvs::Request2DMapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_srvs::Request2DMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/Request2DMap";
  }

  static const char* value(const re_srvs::Request2DMapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_srvs::Request2DMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "36589988f0eaacd3eb9e9e443f14ac19";
  }

  static const char* value(const re_srvs::Request2DMapResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_srvs::Request2DMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/Request2DMap";
  }

  static const char* value(const re_srvs::Request2DMapResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RE_SRVS_SERVICE_REQUEST2DMAP_H

