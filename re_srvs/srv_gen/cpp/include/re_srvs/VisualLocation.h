/* Auto-generated by genmsg_cpp for file /home/vitalij/ros/stacks/roboearth/re_srvs/srv/VisualLocation.srv */
#ifndef RE_SRVS_SERVICE_VISUALLOCATION_H
#define RE_SRVS_SERVICE_VISUALLOCATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace re_srvs
{
template <class ContainerAllocator>
struct VisualLocationRequest_ {
  typedef VisualLocationRequest_<ContainerAllocator> Type;

  VisualLocationRequest_()
  : name()
  , attempts(0)
  {
  }

  VisualLocationRequest_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , attempts(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef int8_t _attempts_type;
  int8_t attempts;


  typedef boost::shared_ptr< ::re_srvs::VisualLocationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_srvs::VisualLocationRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct VisualLocationRequest
typedef  ::re_srvs::VisualLocationRequest_<std::allocator<void> > VisualLocationRequest;

typedef boost::shared_ptr< ::re_srvs::VisualLocationRequest> VisualLocationRequestPtr;
typedef boost::shared_ptr< ::re_srvs::VisualLocationRequest const> VisualLocationRequestConstPtr;



template <class ContainerAllocator>
struct VisualLocationResponse_ {
  typedef VisualLocationResponse_<ContainerAllocator> Type;

  VisualLocationResponse_()
  : result(0)
  {
  }

  VisualLocationResponse_(const ContainerAllocator& _alloc)
  : result(0)
  {
  }

  typedef int8_t _result_type;
  int8_t result;


  typedef boost::shared_ptr< ::re_srvs::VisualLocationResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_srvs::VisualLocationResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct VisualLocationResponse
typedef  ::re_srvs::VisualLocationResponse_<std::allocator<void> > VisualLocationResponse;

typedef boost::shared_ptr< ::re_srvs::VisualLocationResponse> VisualLocationResponsePtr;
typedef boost::shared_ptr< ::re_srvs::VisualLocationResponse const> VisualLocationResponseConstPtr;


struct VisualLocation
{

typedef VisualLocationRequest Request;
typedef VisualLocationResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct VisualLocation
} // namespace re_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_srvs::VisualLocationRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_srvs::VisualLocationRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_srvs::VisualLocationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f01ca0820f3db790a395f93a90ed2cdd";
  }

  static const char* value(const  ::re_srvs::VisualLocationRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf01ca0820f3db790ULL;
  static const uint64_t static_value2 = 0xa395f93a90ed2cddULL;
};

template<class ContainerAllocator>
struct DataType< ::re_srvs::VisualLocationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/VisualLocationRequest";
  }

  static const char* value(const  ::re_srvs::VisualLocationRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_srvs::VisualLocationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string name\n\
int8 attempts\n\
\n\
";
  }

  static const char* value(const  ::re_srvs::VisualLocationRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_srvs::VisualLocationResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_srvs::VisualLocationResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_srvs::VisualLocationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4414c67819626a1b8e0f043a9a0d6c9a";
  }

  static const char* value(const  ::re_srvs::VisualLocationResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4414c67819626a1bULL;
  static const uint64_t static_value2 = 0x8e0f043a9a0d6c9aULL;
};

template<class ContainerAllocator>
struct DataType< ::re_srvs::VisualLocationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/VisualLocationResponse";
  }

  static const char* value(const  ::re_srvs::VisualLocationResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_srvs::VisualLocationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 result\n\
\n\
\n\
";
  }

  static const char* value(const  ::re_srvs::VisualLocationResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::re_srvs::VisualLocationResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_srvs::VisualLocationRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.attempts);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct VisualLocationRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_srvs::VisualLocationResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct VisualLocationResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<re_srvs::VisualLocation> {
  static const char* value() 
  {
    return "2fe0fe9f589bf604b428cdddd534bba1";
  }

  static const char* value(const re_srvs::VisualLocation&) { return value(); } 
};

template<>
struct DataType<re_srvs::VisualLocation> {
  static const char* value() 
  {
    return "re_srvs/VisualLocation";
  }

  static const char* value(const re_srvs::VisualLocation&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_srvs::VisualLocationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2fe0fe9f589bf604b428cdddd534bba1";
  }

  static const char* value(const re_srvs::VisualLocationRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_srvs::VisualLocationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/VisualLocation";
  }

  static const char* value(const re_srvs::VisualLocationRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_srvs::VisualLocationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2fe0fe9f589bf604b428cdddd534bba1";
  }

  static const char* value(const re_srvs::VisualLocationResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_srvs::VisualLocationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/VisualLocation";
  }

  static const char* value(const re_srvs::VisualLocationResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RE_SRVS_SERVICE_VISUALLOCATION_H

