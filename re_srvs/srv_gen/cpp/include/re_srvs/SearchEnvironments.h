/* Auto-generated by genmsg_cpp for file /home/vitalij/ros/stacks/roboearth/re_srvs/srv/SearchEnvironments.srv */
#ifndef RE_SRVS_SERVICE_SEARCHENVIRONMENTS_H
#define RE_SRVS_SERVICE_SEARCHENVIRONMENTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "re_msgs/StringArray.h"
#include "re_msgs/StringArray.h"

namespace re_srvs
{
template <class ContainerAllocator>
struct SearchEnvironmentsRequest_ {
  typedef SearchEnvironmentsRequest_<ContainerAllocator> Type;

  SearchEnvironmentsRequest_()
  : searchID()
  {
  }

  SearchEnvironmentsRequest_(const ContainerAllocator& _alloc)
  : searchID(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _searchID_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  searchID;


  typedef boost::shared_ptr< ::re_srvs::SearchEnvironmentsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_srvs::SearchEnvironmentsRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SearchEnvironmentsRequest
typedef  ::re_srvs::SearchEnvironmentsRequest_<std::allocator<void> > SearchEnvironmentsRequest;

typedef boost::shared_ptr< ::re_srvs::SearchEnvironmentsRequest> SearchEnvironmentsRequestPtr;
typedef boost::shared_ptr< ::re_srvs::SearchEnvironmentsRequest const> SearchEnvironmentsRequestConstPtr;



template <class ContainerAllocator>
struct SearchEnvironmentsResponse_ {
  typedef SearchEnvironmentsResponse_<ContainerAllocator> Type;

  SearchEnvironmentsResponse_()
  : success(false)
  , uids()
  , environments()
  , filenames()
  , fileURLs()
  {
  }

  SearchEnvironmentsResponse_(const ContainerAllocator& _alloc)
  : success(false)
  , uids(_alloc)
  , environments(_alloc)
  , filenames(_alloc)
  , fileURLs(_alloc)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _uids_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  uids;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _environments_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  environments;

  typedef std::vector< ::re_msgs::StringArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::re_msgs::StringArray_<ContainerAllocator> >::other >  _filenames_type;
  std::vector< ::re_msgs::StringArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::re_msgs::StringArray_<ContainerAllocator> >::other >  filenames;

  typedef std::vector< ::re_msgs::StringArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::re_msgs::StringArray_<ContainerAllocator> >::other >  _fileURLs_type;
  std::vector< ::re_msgs::StringArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::re_msgs::StringArray_<ContainerAllocator> >::other >  fileURLs;


  typedef boost::shared_ptr< ::re_srvs::SearchEnvironmentsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_srvs::SearchEnvironmentsResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SearchEnvironmentsResponse
typedef  ::re_srvs::SearchEnvironmentsResponse_<std::allocator<void> > SearchEnvironmentsResponse;

typedef boost::shared_ptr< ::re_srvs::SearchEnvironmentsResponse> SearchEnvironmentsResponsePtr;
typedef boost::shared_ptr< ::re_srvs::SearchEnvironmentsResponse const> SearchEnvironmentsResponseConstPtr;


struct SearchEnvironments
{

typedef SearchEnvironmentsRequest Request;
typedef SearchEnvironmentsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SearchEnvironments
} // namespace re_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_srvs::SearchEnvironmentsRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_srvs::SearchEnvironmentsRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_srvs::SearchEnvironmentsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2d2d663456e9fa76707235a598ce31c7";
  }

  static const char* value(const  ::re_srvs::SearchEnvironmentsRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2d2d663456e9fa76ULL;
  static const uint64_t static_value2 = 0x707235a598ce31c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::re_srvs::SearchEnvironmentsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/SearchEnvironmentsRequest";
  }

  static const char* value(const  ::re_srvs::SearchEnvironmentsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_srvs::SearchEnvironmentsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string searchID\n\
\n\
\n\
";
  }

  static const char* value(const  ::re_srvs::SearchEnvironmentsRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_srvs::SearchEnvironmentsResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_srvs::SearchEnvironmentsResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_srvs::SearchEnvironmentsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8c1ff78116b11eaee25aa4692e43a723";
  }

  static const char* value(const  ::re_srvs::SearchEnvironmentsResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8c1ff78116b11eaeULL;
  static const uint64_t static_value2 = 0xe25aa4692e43a723ULL;
};

template<class ContainerAllocator>
struct DataType< ::re_srvs::SearchEnvironmentsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/SearchEnvironmentsResponse";
  }

  static const char* value(const  ::re_srvs::SearchEnvironmentsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_srvs::SearchEnvironmentsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
string[] uids\n\
string[] environments\n\
re_msgs/StringArray[] filenames\n\
re_msgs/StringArray[] fileURLs\n\
\n\
\n\
\n\
================================================================================\n\
MSG: re_msgs/StringArray\n\
# A StringArray message contains an array of strings. This is used by other \n\
# message/service declarations in order to create 2-dimensional string \n\
# arrays with different lengths for one dimension (StringArray[])\n\
string[] list   # array of strings\n\
\n\
";
  }

  static const char* value(const  ::re_srvs::SearchEnvironmentsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_srvs::SearchEnvironmentsRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.searchID);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SearchEnvironmentsRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_srvs::SearchEnvironmentsResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
    stream.next(m.uids);
    stream.next(m.environments);
    stream.next(m.filenames);
    stream.next(m.fileURLs);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SearchEnvironmentsResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<re_srvs::SearchEnvironments> {
  static const char* value() 
  {
    return "7f98e4a68dee037c28d22ad282fe1605";
  }

  static const char* value(const re_srvs::SearchEnvironments&) { return value(); } 
};

template<>
struct DataType<re_srvs::SearchEnvironments> {
  static const char* value() 
  {
    return "re_srvs/SearchEnvironments";
  }

  static const char* value(const re_srvs::SearchEnvironments&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_srvs::SearchEnvironmentsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7f98e4a68dee037c28d22ad282fe1605";
  }

  static const char* value(const re_srvs::SearchEnvironmentsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_srvs::SearchEnvironmentsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/SearchEnvironments";
  }

  static const char* value(const re_srvs::SearchEnvironmentsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_srvs::SearchEnvironmentsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7f98e4a68dee037c28d22ad282fe1605";
  }

  static const char* value(const re_srvs::SearchEnvironmentsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_srvs::SearchEnvironmentsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/SearchEnvironments";
  }

  static const char* value(const re_srvs::SearchEnvironmentsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RE_SRVS_SERVICE_SEARCHENVIRONMENTS_H

