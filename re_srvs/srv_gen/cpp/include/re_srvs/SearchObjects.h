/* Auto-generated by genmsg_cpp for file /home/vitalij/ros/stacks/roboearth/re_srvs/srv/SearchObjects.srv */
#ifndef RE_SRVS_SERVICE_SEARCHOBJECTS_H
#define RE_SRVS_SERVICE_SEARCHOBJECTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "re_msgs/StringArray.h"
#include "re_msgs/StringArray.h"

namespace re_srvs
{
template <class ContainerAllocator>
struct SearchObjectsRequest_ {
  typedef SearchObjectsRequest_<ContainerAllocator> Type;

  SearchObjectsRequest_()
  : searchID()
  {
  }

  SearchObjectsRequest_(const ContainerAllocator& _alloc)
  : searchID(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _searchID_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  searchID;


  typedef boost::shared_ptr< ::re_srvs::SearchObjectsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_srvs::SearchObjectsRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SearchObjectsRequest
typedef  ::re_srvs::SearchObjectsRequest_<std::allocator<void> > SearchObjectsRequest;

typedef boost::shared_ptr< ::re_srvs::SearchObjectsRequest> SearchObjectsRequestPtr;
typedef boost::shared_ptr< ::re_srvs::SearchObjectsRequest const> SearchObjectsRequestConstPtr;



template <class ContainerAllocator>
struct SearchObjectsResponse_ {
  typedef SearchObjectsResponse_<ContainerAllocator> Type;

  SearchObjectsResponse_()
  : success(false)
  , uids()
  , objects()
  , filenames()
  , fileURLs()
  {
  }

  SearchObjectsResponse_(const ContainerAllocator& _alloc)
  : success(false)
  , uids(_alloc)
  , objects(_alloc)
  , filenames(_alloc)
  , fileURLs(_alloc)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _uids_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  uids;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _objects_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  objects;

  typedef std::vector< ::re_msgs::StringArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::re_msgs::StringArray_<ContainerAllocator> >::other >  _filenames_type;
  std::vector< ::re_msgs::StringArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::re_msgs::StringArray_<ContainerAllocator> >::other >  filenames;

  typedef std::vector< ::re_msgs::StringArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::re_msgs::StringArray_<ContainerAllocator> >::other >  _fileURLs_type;
  std::vector< ::re_msgs::StringArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::re_msgs::StringArray_<ContainerAllocator> >::other >  fileURLs;


  typedef boost::shared_ptr< ::re_srvs::SearchObjectsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_srvs::SearchObjectsResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SearchObjectsResponse
typedef  ::re_srvs::SearchObjectsResponse_<std::allocator<void> > SearchObjectsResponse;

typedef boost::shared_ptr< ::re_srvs::SearchObjectsResponse> SearchObjectsResponsePtr;
typedef boost::shared_ptr< ::re_srvs::SearchObjectsResponse const> SearchObjectsResponseConstPtr;


struct SearchObjects
{

typedef SearchObjectsRequest Request;
typedef SearchObjectsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SearchObjects
} // namespace re_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_srvs::SearchObjectsRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_srvs::SearchObjectsRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_srvs::SearchObjectsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2d2d663456e9fa76707235a598ce31c7";
  }

  static const char* value(const  ::re_srvs::SearchObjectsRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2d2d663456e9fa76ULL;
  static const uint64_t static_value2 = 0x707235a598ce31c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::re_srvs::SearchObjectsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/SearchObjectsRequest";
  }

  static const char* value(const  ::re_srvs::SearchObjectsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_srvs::SearchObjectsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string searchID\n\
\n\
\n\
";
  }

  static const char* value(const  ::re_srvs::SearchObjectsRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_srvs::SearchObjectsResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_srvs::SearchObjectsResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_srvs::SearchObjectsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "74c585e4393b940b47d10bbd4d351f9f";
  }

  static const char* value(const  ::re_srvs::SearchObjectsResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x74c585e4393b940bULL;
  static const uint64_t static_value2 = 0x47d10bbd4d351f9fULL;
};

template<class ContainerAllocator>
struct DataType< ::re_srvs::SearchObjectsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/SearchObjectsResponse";
  }

  static const char* value(const  ::re_srvs::SearchObjectsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_srvs::SearchObjectsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
string[] uids\n\
string[] objects\n\
re_msgs/StringArray[] filenames\n\
re_msgs/StringArray[] fileURLs\n\
\n\
\n\
================================================================================\n\
MSG: re_msgs/StringArray\n\
# A StringArray message contains an array of strings. This is used by other \n\
# message/service declarations in order to create 2-dimensional string \n\
# arrays with different lengths for one dimension (StringArray[])\n\
string[] list   # array of strings\n\
\n\
";
  }

  static const char* value(const  ::re_srvs::SearchObjectsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_srvs::SearchObjectsRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.searchID);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SearchObjectsRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_srvs::SearchObjectsResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
    stream.next(m.uids);
    stream.next(m.objects);
    stream.next(m.filenames);
    stream.next(m.fileURLs);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SearchObjectsResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<re_srvs::SearchObjects> {
  static const char* value() 
  {
    return "2dfe23d35da7ced197e999d2dd7125f1";
  }

  static const char* value(const re_srvs::SearchObjects&) { return value(); } 
};

template<>
struct DataType<re_srvs::SearchObjects> {
  static const char* value() 
  {
    return "re_srvs/SearchObjects";
  }

  static const char* value(const re_srvs::SearchObjects&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_srvs::SearchObjectsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2dfe23d35da7ced197e999d2dd7125f1";
  }

  static const char* value(const re_srvs::SearchObjectsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_srvs::SearchObjectsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/SearchObjects";
  }

  static const char* value(const re_srvs::SearchObjectsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_srvs::SearchObjectsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2dfe23d35da7ced197e999d2dd7125f1";
  }

  static const char* value(const re_srvs::SearchObjectsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_srvs::SearchObjectsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/SearchObjects";
  }

  static const char* value(const re_srvs::SearchObjectsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RE_SRVS_SERVICE_SEARCHOBJECTS_H

