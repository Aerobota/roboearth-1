/* Auto-generated by genmsg_cpp for file /home/vitalij/ros/stacks/roboearth/re_srvs/srv/DelObject.srv */
#ifndef RE_SRVS_SERVICE_DELOBJECT_H
#define RE_SRVS_SERVICE_DELOBJECT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace re_srvs
{
template <class ContainerAllocator>
struct DelObjectRequest_ {
  typedef DelObjectRequest_<ContainerAllocator> Type;

  DelObjectRequest_()
  : objectUID()
  , apiKey()
  {
  }

  DelObjectRequest_(const ContainerAllocator& _alloc)
  : objectUID(_alloc)
  , apiKey(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _objectUID_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  objectUID;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _apiKey_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  apiKey;


  typedef boost::shared_ptr< ::re_srvs::DelObjectRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_srvs::DelObjectRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DelObjectRequest
typedef  ::re_srvs::DelObjectRequest_<std::allocator<void> > DelObjectRequest;

typedef boost::shared_ptr< ::re_srvs::DelObjectRequest> DelObjectRequestPtr;
typedef boost::shared_ptr< ::re_srvs::DelObjectRequest const> DelObjectRequestConstPtr;



template <class ContainerAllocator>
struct DelObjectResponse_ {
  typedef DelObjectResponse_<ContainerAllocator> Type;

  DelObjectResponse_()
  : success(false)
  {
  }

  DelObjectResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


  typedef boost::shared_ptr< ::re_srvs::DelObjectResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_srvs::DelObjectResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DelObjectResponse
typedef  ::re_srvs::DelObjectResponse_<std::allocator<void> > DelObjectResponse;

typedef boost::shared_ptr< ::re_srvs::DelObjectResponse> DelObjectResponsePtr;
typedef boost::shared_ptr< ::re_srvs::DelObjectResponse const> DelObjectResponseConstPtr;


struct DelObject
{

typedef DelObjectRequest Request;
typedef DelObjectResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct DelObject
} // namespace re_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_srvs::DelObjectRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_srvs::DelObjectRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_srvs::DelObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "804bd494ffcd71061878bb51340c5982";
  }

  static const char* value(const  ::re_srvs::DelObjectRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x804bd494ffcd7106ULL;
  static const uint64_t static_value2 = 0x1878bb51340c5982ULL;
};

template<class ContainerAllocator>
struct DataType< ::re_srvs::DelObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/DelObjectRequest";
  }

  static const char* value(const  ::re_srvs::DelObjectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_srvs::DelObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string objectUID\n\
string apiKey\n\
\n\
\n\
";
  }

  static const char* value(const  ::re_srvs::DelObjectRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_srvs::DelObjectResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_srvs::DelObjectResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_srvs::DelObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::re_srvs::DelObjectResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::re_srvs::DelObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/DelObjectResponse";
  }

  static const char* value(const  ::re_srvs::DelObjectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_srvs::DelObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
";
  }

  static const char* value(const  ::re_srvs::DelObjectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::re_srvs::DelObjectResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_srvs::DelObjectRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.objectUID);
    stream.next(m.apiKey);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DelObjectRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_srvs::DelObjectResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DelObjectResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<re_srvs::DelObject> {
  static const char* value() 
  {
    return "81ac674334c4dcfb20edcc930b734034";
  }

  static const char* value(const re_srvs::DelObject&) { return value(); } 
};

template<>
struct DataType<re_srvs::DelObject> {
  static const char* value() 
  {
    return "re_srvs/DelObject";
  }

  static const char* value(const re_srvs::DelObject&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_srvs::DelObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "81ac674334c4dcfb20edcc930b734034";
  }

  static const char* value(const re_srvs::DelObjectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_srvs::DelObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/DelObject";
  }

  static const char* value(const re_srvs::DelObjectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_srvs::DelObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "81ac674334c4dcfb20edcc930b734034";
  }

  static const char* value(const re_srvs::DelObjectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_srvs::DelObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/DelObject";
  }

  static const char* value(const re_srvs::DelObjectResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RE_SRVS_SERVICE_DELOBJECT_H

