/* Auto-generated by genmsg_cpp for file /home/vitalij/ros/stacks/roboearth/re_srvs/srv/SearchActionRecipes.srv */
#ifndef RE_SRVS_SERVICE_SEARCHACTIONRECIPES_H
#define RE_SRVS_SERVICE_SEARCHACTIONRECIPES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace re_srvs
{
template <class ContainerAllocator>
struct SearchActionRecipesRequest_ {
  typedef SearchActionRecipesRequest_<ContainerAllocator> Type;

  SearchActionRecipesRequest_()
  : searchID()
  {
  }

  SearchActionRecipesRequest_(const ContainerAllocator& _alloc)
  : searchID(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _searchID_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  searchID;


  typedef boost::shared_ptr< ::re_srvs::SearchActionRecipesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_srvs::SearchActionRecipesRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SearchActionRecipesRequest
typedef  ::re_srvs::SearchActionRecipesRequest_<std::allocator<void> > SearchActionRecipesRequest;

typedef boost::shared_ptr< ::re_srvs::SearchActionRecipesRequest> SearchActionRecipesRequestPtr;
typedef boost::shared_ptr< ::re_srvs::SearchActionRecipesRequest const> SearchActionRecipesRequestConstPtr;



template <class ContainerAllocator>
struct SearchActionRecipesResponse_ {
  typedef SearchActionRecipesResponse_<ContainerAllocator> Type;

  SearchActionRecipesResponse_()
  : success(false)
  , uids()
  , recipes()
  {
  }

  SearchActionRecipesResponse_(const ContainerAllocator& _alloc)
  : success(false)
  , uids(_alloc)
  , recipes(_alloc)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _uids_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  uids;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _recipes_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  recipes;


  typedef boost::shared_ptr< ::re_srvs::SearchActionRecipesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re_srvs::SearchActionRecipesResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SearchActionRecipesResponse
typedef  ::re_srvs::SearchActionRecipesResponse_<std::allocator<void> > SearchActionRecipesResponse;

typedef boost::shared_ptr< ::re_srvs::SearchActionRecipesResponse> SearchActionRecipesResponsePtr;
typedef boost::shared_ptr< ::re_srvs::SearchActionRecipesResponse const> SearchActionRecipesResponseConstPtr;


struct SearchActionRecipes
{

typedef SearchActionRecipesRequest Request;
typedef SearchActionRecipesResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SearchActionRecipes
} // namespace re_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_srvs::SearchActionRecipesRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_srvs::SearchActionRecipesRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_srvs::SearchActionRecipesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2d2d663456e9fa76707235a598ce31c7";
  }

  static const char* value(const  ::re_srvs::SearchActionRecipesRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2d2d663456e9fa76ULL;
  static const uint64_t static_value2 = 0x707235a598ce31c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::re_srvs::SearchActionRecipesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/SearchActionRecipesRequest";
  }

  static const char* value(const  ::re_srvs::SearchActionRecipesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_srvs::SearchActionRecipesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string searchID\n\
\n\
\n\
";
  }

  static const char* value(const  ::re_srvs::SearchActionRecipesRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::re_srvs::SearchActionRecipesResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::re_srvs::SearchActionRecipesResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::re_srvs::SearchActionRecipesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8dad7a939c1eb856368da22a41bc0845";
  }

  static const char* value(const  ::re_srvs::SearchActionRecipesResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8dad7a939c1eb856ULL;
  static const uint64_t static_value2 = 0x368da22a41bc0845ULL;
};

template<class ContainerAllocator>
struct DataType< ::re_srvs::SearchActionRecipesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/SearchActionRecipesResponse";
  }

  static const char* value(const  ::re_srvs::SearchActionRecipesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re_srvs::SearchActionRecipesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
string[] uids\n\
string[] recipes\n\
\n\
\n\
";
  }

  static const char* value(const  ::re_srvs::SearchActionRecipesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_srvs::SearchActionRecipesRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.searchID);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SearchActionRecipesRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re_srvs::SearchActionRecipesResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
    stream.next(m.uids);
    stream.next(m.recipes);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SearchActionRecipesResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<re_srvs::SearchActionRecipes> {
  static const char* value() 
  {
    return "ab460e156aa3e532e70c8a5b8e2f72e7";
  }

  static const char* value(const re_srvs::SearchActionRecipes&) { return value(); } 
};

template<>
struct DataType<re_srvs::SearchActionRecipes> {
  static const char* value() 
  {
    return "re_srvs/SearchActionRecipes";
  }

  static const char* value(const re_srvs::SearchActionRecipes&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_srvs::SearchActionRecipesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ab460e156aa3e532e70c8a5b8e2f72e7";
  }

  static const char* value(const re_srvs::SearchActionRecipesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_srvs::SearchActionRecipesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/SearchActionRecipes";
  }

  static const char* value(const re_srvs::SearchActionRecipesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re_srvs::SearchActionRecipesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ab460e156aa3e532e70c8a5b8e2f72e7";
  }

  static const char* value(const re_srvs::SearchActionRecipesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re_srvs::SearchActionRecipesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re_srvs/SearchActionRecipes";
  }

  static const char* value(const re_srvs::SearchActionRecipesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RE_SRVS_SERVICE_SEARCHACTIONRECIPES_H

